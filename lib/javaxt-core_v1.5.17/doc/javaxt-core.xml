<?xml version="1.0" encoding="UTF-8"?>
<jel>
	<admin creation="Wed May 29 10:42:21 EDT 2013" xsdversion="1.0.0" version="1.0.0" />
	<jelclass superclass="Object" visibility="public" package="javaxt.html" superclassfulltype="java.lang.Object" fulltype="javaxt.html.Parser" type="Parser">
		<comment>
			<description>A simple html parser used to extract blocks of html from a document.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parser">
				<params>
					<param name="html" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setHTML" fulltype="void" type="void">
				<comment>
					<description>Used to reset the &quot;scope&quot; of the parser</description>
				</comment>
				<params>
					<param name="html" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getAbsolutePath" fulltype="java.lang.String" type="String">
				<params>
					<param name="RelPath" fulltype="java.lang.String" type="String" />
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getElementByAttributes" fulltype="javaxt.html.Element" type="Element">
				<comment>
					<description>Returns the first HTML Element found in the HTML document with given tag
  name and attribute. Returns null if an element was not found.</description>
				</comment>
				<params>
					<param name="tagName" fulltype="java.lang.String" type="String" />
					<param name="attributeName" fulltype="java.lang.String" type="String" />
					<param name="attributeValue" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getElementsByTagName" fulltype="javaxt.html.Element[]" type="Element">
				<comment>
					<description>Returns an array of HTML Elements found in the HTML document with given
  tag name.</description>
				</comment>
				<params>
					<param name="tagName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getElementByTagName" fulltype="javaxt.html.Element" type="Element">
				<comment>
					<description>Returns the first HTML Element found in the HTML document with given tag
  name. Returns null if an element was not found.</description>
				</comment>
				<params>
					<param name="tagName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getElementByID" fulltype="javaxt.html.Element" type="Element">
				<comment>
					<description>Used to extract an html &quot;element&quot; from a larger html document</description>
				</comment>
				<params>
					<param name="id" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getImageLinks" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Used to extract an image link from a block of html</description>
				</comment>
				<params>
					<param name="html" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="stripHTMLTags" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to remove any html tags from a block of text</description>
				</comment>
				<params>
					<param name="html" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.html" superclassfulltype="java.lang.Object" fulltype="javaxt.html.Input" type="Input">
		<comment>
			<description>Used to represent a single html form input.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Input">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Input">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="file" fulltype="javaxt.io.File" type="File" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getValue" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toByteArray" fulltype="byte[]" type="byte" />
			<method visibility="public" name="getSize" fulltype="long" type="long">
				<comment>
					<description>Returns the size of the value.</description>
				</comment>
			</method>
			<method visibility="public" name="isFile" fulltype="boolean" type="boolean" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.html" superclassfulltype="java.lang.Object" fulltype="javaxt.html.Form" type="Form">
		<comment>
			<description>Used to post html form data to an http server. Supports both HTTP GET and
   POST methods.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Form">
				<comment>
					<description>Creates a new instance of this class.</description>
					<attribute name="@param">
						<description>method HTTP request method (e.g. &quot;GET&quot; or &quot;POST&quot;)</description>
					</attribute>
					<attribute name="@param">
						<description>action URL to send the form data.</description>
					</attribute>
				</comment>
				<params>
					<param name="method" comment="HTTP request method (e.g. &quot;GET&quot; or &quot;POST&quot;)" fulltype="java.lang.String" type="String" />
					<param name="action" comment="URL to send the form data." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setName" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addInput" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addInput" fulltype="void" type="void">
				<params>
					<param name="input" fulltype="javaxt.html.Input" type="Input" />
				</params>
			</method>
			<method visibility="public" name="setMethod" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>method HTTP request method (e.g. &quot;GET&quot; or &quot;POST&quot;)</description>
					</attribute>
				</comment>
				<params>
					<param name="method" comment="HTTP request method (e.g. &quot;GET&quot; or &quot;POST&quot;)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setAction" fulltype="void" type="void">
				<comment>
					<attribute name="@param">
						<description>action URL to send the form data.</description>
					</attribute>
				</comment>
				<params>
					<param name="action" comment="URL to send the form data." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="submit" fulltype="javaxt.http.Response" type="Response">
				<comment>
					<description>Used to submit the form data. Returns the http response from the server.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.html" superclassfulltype="java.lang.Object" fulltype="javaxt.html.Element" type="Element">
		<fields>
			<field visibility="protected" name="innerHTML" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="outerHTML" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="isStartTag" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="Element">
				<params>
					<param name="html" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the element tag/node name.</description>
				</comment>
			</method>
			<method visibility="public" name="getInnerHTML" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getOuterHTML" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getAttributeValue" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value for a given attribute. If no match is found, returns
  an empty string.</description>
				</comment>
				<params>
					<param name="attributeName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.http" superclassfulltype="java.lang.Object" fulltype="javaxt.http.Response" type="Response">
		<comment>
			<description>Used to process the response from an HTTP server.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="Response">
				<params>
					<param name="request" fulltype="javaxt.http.Request" type="Request" />
					<param name="conn" fulltype="java.net.URLConnection" type="URLConnection" />
				</params>
			</constructor>
			<method visibility="public" name="getURL" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Returns the url used to connect to the server. Note that this URL may
  differ from the one used to instantiate the Request object. This only
  occurs when the server returns a redirect code and the maximum number of
  redirects is greater than 0. See Request.setNumRedirects().</description>
				</comment>
			</method>
			<method visibility="public" name="getHeaders" fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns key/value map representing all the HTTP headers returned from
  the server.</description>
				</comment>
			</method>
			<method visibility="public" name="getHeaders" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array of values associated with a given key found in the HTTP
  headers returned from the server.</description>
				</comment>
				<params>
					<param name="headerName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getHeader" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value of a given key in the HTTP header.</description>
					<attribute name="@param">
						<description>headerName A String specifying the header name (e.g. &quot;Content-Encoding&quot;)</description>
					</attribute>
				</comment>
				<params>
					<param name="headerName" comment="A String specifying the header name (e.g. &quot;Content-Encoding&quot;)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getStatus" fulltype="int" type="int">
				<comment>
					<description>Returns the HTTP status code extracted from the first line in the
  response header. If the client fails to connect to the server, a value
  of -1 is returned.</description>
				</comment>
			</method>
			<method visibility="public" name="getMessage" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the status message found in the first line in the response
  header.</description>
				</comment>
			</method>
			<method visibility="public" name="getCharacterEncoding" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the character encoding used in the body of this
  response as specified in the &quot;Content-Type&quot; header. For example, the 
  following &quot;Content-Type&quot; header specifies &quot;UTF-8&quot; character encoding: 
  &lt;pre&gt;Content-Type: text/html; charset=utf-8&lt;/pre&gt;
  This method returns a null if the response does not specify a character 
  encoding.</description>
				</comment>
			</method>
			<method visibility="public" name="getInputStream" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Returns the body of the http response as an input stream. No distinction
  is made between &quot;normal&quot; responses (e.g. status code 200) and error
  responses (e.g. 404). &lt;p/&gt;
  Sample Usage:
   &lt;pre&gt;
        java.io.InputStream inputStream = response.getInputStream();
        byte[] b = new byte[1024];
        int x=0;
        while ( (x = inputStream.read(b)) != -1) {
            //Do something! Example: outputStream.write(b,0,x);
        }
        inputStream.close();
   &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used read through the entire response stream and cast it to a string.
  The string is encoded using the character set specified in the
  &quot;Content-Type&quot; header as returned by the getCharacterEncoding() method.
  Defaults to &quot;UTF-8&quot; if no character set is defined.</description>
				</comment>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used read through the entire response stream and cast it to a string.
   WARNING: This method will never throw an error.</description>
					<attribute name="@param">
						<description>charsetName Name of the character encoding used to read the file.
   Examples include UTF-8 and ISO-8859-1</description>
					</attribute>
				</comment>
				<params>
					<param name="charsetName" comment="Name of the character encoding used to read the file.
   Examples include UTF-8 and ISO-8859-1" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getXML" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Used read through the entire response stream and converts it to an xml
   DOM document.</description>
				</comment>
			</method>
			<method visibility="public" name="getImage" fulltype="javaxt.io.Image" type="Image">
				<comment>
					<description>Used read through the entire response stream and returns an Image.</description>
				</comment>
			</method>
			<method visibility="public" name="getBytes" fulltype="java.io.ByteArrayOutputStream" type="ByteArrayOutputStream">
				<comment>
					<description>Used read through the entire response stream and returns a raw byte
  array (ByteArrayOutputStream). Note that this method does not
  automatically decompress the response if the data is compressed. Use
  the Response.getBytes(true) method to automatically decompress the
  response.</description>
				</comment>
			</method>
			<method visibility="public" name="getBytes" fulltype="java.io.ByteArrayOutputStream" type="ByteArrayOutputStream">
				<comment>
					<description>Used read through the entire response stream and returns a byte array
  ByteArrayOutputStream.</description>
					<attribute name="@param">
						<description>deflate Option to decompress a gzip encoded response.</description>
					</attribute>
				</comment>
				<params>
					<param name="deflate" comment="Option to decompress a gzip encoded response." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the raw response headers returned from the server. Use the
  getText() method to get response body as a String.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.http" superclassfulltype="java.lang.Object" fulltype="javaxt.http.Request" type="Request">
		<comment>
			<description>Used to set up a connection to an http server. This class is used in
   conjunction with the HTTP Response class. Example:
 &lt;pre&gt;
    javaxt.http.Response response = new javaxt.http.Request(url).getResponse();
 &lt;/pre&gt;

   A slightly more complex example might look like this:
 &lt;pre&gt;
    javaxt.http.Request request = new javaxt.http.Request(url);
    request.setHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.10)&quot;);
    request.setHeader(&quot;Accept-Encoding&quot;, &quot;deflate&quot;); //no gzip encoding
    java.io.InputStream inputStream = request.getResponse().getInputStream();
    new javaxt.io.File(&quot;/temp/image.jpg&quot;).write(inputStream);
    inputStream.close();
 &lt;/pre&gt;</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Request">
				<comment>
					<attribute name="@param">
						<description>url URL endpoint</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="URL endpoint" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Request">
				<comment>
					<attribute name="@param">
						<description>url URL endpoint</description>
					</attribute>
					<attribute name="@param">
						<description>httpProxy Proxy server</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="URL endpoint" fulltype="java.lang.String" type="String" />
					<param name="httpProxy" comment="Proxy server" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Request">
				<comment>
					<attribute name="@param">
						<description>url URL endpoint</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="URL endpoint" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<constructor visibility="public" name="Request">
				<comment>
					<attribute name="@param">
						<description>url URL endpoint</description>
					</attribute>
					<attribute name="@param">
						<description>httpProxy Proxy server</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="URL endpoint" fulltype="java.net.URL" type="URL" />
					<param name="httpProxy" comment="Proxy server" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getURL" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Used to return the URL used to instantiate this class.</description>
				</comment>
			</method>
			<method visibility="public" name="getResponse" fulltype="javaxt.http.Response" type="Response">
				<comment>
					<description>Used to return the response from the server.</description>
				</comment>
			</method>
			<method visibility="public" name="setUseCache" fulltype="void" type="void">
				<comment>
					<description>Sets the header associated with cache-control. If true, the protocol is
   allowed to use caching whenever it can. If false, the protocol must
   always try to get a fresh copy of the object. By default, the useCache
   variable is set to false.</description>
				</comment>
				<params>
					<param name="useCache" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="validateSSLCertificates" fulltype="void" type="void">
				<comment>
					<description>Used to enable/disable certificate validation for HTTPS Connections.
  Note that this is set to false by default.</description>
				</comment>
				<params>
					<param name="validateCertificates" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setNumRedirects" fulltype="void" type="void">
				<comment>
					<description>Sets the maximum number of redirects to follow. By default, this number
  is set to 5.</description>
				</comment>
				<params>
					<param name="maxRedirects" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setCredentials" fulltype="void" type="void">
				<comment>
					<description>Used to set the username and password used to authenticate the client.
  The credentials are used in the &quot;Authorization&quot; request header and 
  encoded using &quot;Basic&quot; authentication. Note that credentials encoded 
  using &quot;Basic&quot; authentication can be easily decoded. As a general rule, 
  do not pass credentials to sites that are not secured using SSL.</description>
				</comment>
				<params>
					<param name="username" fulltype="java.lang.String" type="String" />
					<param name="password" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setUserName" fulltype="void" type="void">
				<comment>
					<description>Used to set the username used to authenticate the client. See 
  setCredentials() for more information.</description>
				</comment>
				<params>
					<param name="username" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setPassword" fulltype="void" type="void">
				<comment>
					<description>Used to set the password used to authenticate the client. See 
  setCredentials() for more information.</description>
				</comment>
				<params>
					<param name="password" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to open an HTTP connection to the URL and POST data to the server.</description>
					<attribute name="@param">
						<description>payload InputStream containing the body of the HTTP request.</description>
					</attribute>
				</comment>
				<params>
					<param name="payload" comment="InputStream containing the body of the HTTP request." fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to open an HTTP connection to the URL and POST data to the server.</description>
					<attribute name="@param">
						<description>payload String containing the body of the HTTP request.</description>
					</attribute>
				</comment>
				<params>
					<param name="payload" comment="String containing the body of the HTTP request." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to open an HTTP connection to the URL and POST data to the server.</description>
					<attribute name="@param">
						<description>payload Byte array containing the body of the HTTP request.</description>
					</attribute>
				</comment>
				<params>
					<param name="payload" comment="Byte array containing the body of the HTTP request." fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to post an array of form inputs to a server. Form inputs can 
  include text or binary data, including files. Payload is normally
  &quot;multipart/form-data&quot; encoded.</description>
				</comment>
				<params>
					<param name="inputs" fulltype="javaxt.html.Input[]" type="Input" />
				</params>
			</method>
			<method visibility="public" name="setHeader" fulltype="void" type="void">
				<comment>
					<description>Used to set a Request Property in the HTTP header (e.g. &quot;User-Agent&quot;).</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addHeader" fulltype="void" type="void">
				<comment>
					<description>Used to add a Request Property to the HTTP header (e.g. &quot;User-Agent&quot;).</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getResponseCode" fulltype="int" type="int">
				<comment>
					<description>Returns the HTTP status code extracted from the first line in the
  response.</description>
				</comment>
			</method>
			<method visibility="protected" name="getResponseMessage" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the message extracted from the first line in the response.</description>
				</comment>
			</method>
			<method visibility="protected" name="getResponseHeaders" fulltype="java.util.Map" type="Map" />
			<method visibility="public" name="getRequestHeaders" fulltype="java.util.Map" type="Map" />
			<method visibility="protected" name="getResponseHeaders" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="headerName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getResponseHeader" fulltype="java.lang.String" type="String">
				<params>
					<param name="headerName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProxy" fulltype="java.net.Proxy" type="Proxy">
				<comment>
					<description>Used to set the http proxy.</description>
				</comment>
				<params>
					<param name="proxyHost" fulltype="java.lang.String" type="String" />
					<param name="proxyPort" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setProxy" fulltype="java.net.Proxy" type="Proxy">
				<comment>
					<description>Used to set the http proxy.</description>
				</comment>
				<params>
					<param name="httpProxy" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProxy" fulltype="void" type="void">
				<comment>
					<description>Used to set the http proxy as needed.</description>
				</comment>
				<params>
					<param name="httpProxy" fulltype="java.net.Proxy" type="Proxy" />
				</params>
			</method>
			<method visibility="public" name="isProxyAvailable" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to check whether a proxy server is online/accessible.</description>
				</comment>
				<params>
					<param name="proxyHost" fulltype="java.lang.String" type="String" />
					<param name="proxyPort" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the request headers sent to the server.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Shell" type="Shell">
		<comment>
			<description>Used to execute command line applications and return the corresponding
   output streams (standard output and error output streams).</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Shell">
				<comment>
					<description>Creates a new instance of Shell.</description>
					<attribute name="@param">
						<description>executable Path to the executable to run</description>
					</attribute>
					<attribute name="@param">
						<description>parameters Command line args passed to the executable</description>
					</attribute>
				</comment>
				<params>
					<param name="executable" comment="Path to the executable to run" fulltype="java.io.File" type="File" />
					<param name="parameters" comment="Command line args passed to the executable" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Shell">
				<comment>
					<description>Creates a new instance of Shell.</description>
					<attribute name="@param">
						<description>executable Path to the executable to run</description>
					</attribute>
					<attribute name="@param">
						<description>parameters Command line args passed to the executable</description>
					</attribute>
				</comment>
				<params>
					<param name="executable" comment="Path to the executable to run" fulltype="javaxt.io.File" type="File" />
					<param name="parameters" comment="Command line args passed to the executable" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Shell">
				<comment>
					<description>Creates a new instance of Shell.</description>
					<attribute name="@param">
						<description>cmd Command to execute. Example: &quot;cmd /c dir C:\\temp&quot;</description>
					</attribute>
				</comment>
				<params>
					<param name="cmd" comment="Command to execute. Example: &quot;cmd /c dir C:\\temp&quot;" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Shell">
				<comment>
					<description>Creates a new instance of Shell.</description>
					<attribute name="@param">
						<description>cmdarray Command to execute, along with the command line args in a
  String array.</description>
					</attribute>
				</comment>
				<params>
					<param name="cmdarray" comment="Command to execute, along with the command line args in a
  String array." fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getOutput" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to retrieve the standard output stream. Returns a List that can be
  parsed while the executable is still running or after is has been run.
  The difference lies in when the run method is invoked. The following is 
  an example of how to process the output stream while the app is running.
  The getOutput() is called BEFORE the run() method is invoked.
   &lt;pre&gt;
        File exe = new File(&quot;C:\\Program Files\\PostgreSQL\\8.4\\bin\\shp2pgsql.exe&quot;);
        String[] options = new String[]{&quot;-W&quot;, &quot;UTF-8&quot;, &quot;-s&quot;, &quot;4326&quot;, &quot;C:\country.shp&quot;, &quot;t_country&quot;};

        javaxt.io.Shell cmd = new javaxt.io.Shell(exe, options);
        java.util.List&amp;lt;String&amp;gt; output = cmd.getOutput();
        cmd.run();

        String line;
        while (true){
            synchronized (output) {
                while (output.isEmpty()) {
                  try {
                      output.wait();
                  }
                  catch (InterruptedException e) {
                  }
                }
                line = output.remove(0);
            }

            if (line!=null){
                System.out.println(line);
            }
            else{
                break;
            }
        }
   &lt;/pre&gt;
 If you want to get the entire output all at once, just call the getOutput()
 AFTER the run() method. Example:
   &lt;pre&gt;
        javaxt.io.Shell cmd = new javaxt.io.Shell(exe, options);
        cmd.run();
        java.util.List&lt;String&gt; output = cmd.getOutput();
        for (int i=0; i&lt;output.size(); i++){
            System.out.println(output.get(i));
        }
   &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="getErrors" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to retrieve the error output stream. Returns a List that can be
  parsed while the executable is still running or after is has been run.</description>
				</comment>
			</method>
			<method visibility="public" name="run" fulltype="void" type="void">
				<comment>
					<description>Used to execute the process specified in the constructor and populate
  the output streams. This is an overloaded method equivalent to calling
  run(false);</description>
				</comment>
			</method>
			<method visibility="public" name="run" fulltype="void" type="void">
				<comment>
					<description>Used to execute the process specified in the constructor and populate
  the output streams.</description>
					<attribute name="@param">
						<description>throwExceptions If true, throws out any exceptions that may have
  been thrown while executing the process.</description>
					</attribute>
				</comment>
				<params>
					<param name="throwExceptions" comment="If true, throws out any exceptions that may have
  been thrown while executing the process." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>Used to stop the current process. Note that this method does not stop
  or kill process grandchildren. This is a limitation of Java, not this
  class per se. See Sun bug 4770092 for more details.</description>
				</comment>
			</method>
			<method visibility="public" name="getEllapsedTime" fulltype="long" type="long">
				<comment>
					<description>Used to return the total time (milliseconds) it took to execute the
  process.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Jar" type="Jar">
		<comment>
			<description>Used to find entries in a jar file associated with a given class or 
   package. Note that jar files are unzipped when deployed on an app server.
   This class is designed to handle both zipped and unzipped jar files.

   The original motivation behind this class was to support a requirement to 
   extract and update config files stored in Java packages. For console apps, 
   the config file is stored in the jar (zip) file. For web apps, chances are 
   that the package has been un-zipped and the config file is laying around
   on disk. This class was designed to support both use cases.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Jar">
				<comment>
					<description>Creates a new instance of Jar</description>
				</comment>
				<params>
					<param name="object" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="Jar">
				<params>
					<param name="Class" fulltype="java.lang.Class" type="Class" />
				</params>
			</constructor>
			<constructor visibility="public" name="Jar">
				<params>
					<param name="Package" fulltype="java.lang.Package" type="Package" />
				</params>
			</constructor>
			<constructor visibility="public" name="Jar">
				<params>
					<param name="file" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method visibility="public" name="getFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns a java.io.File representation of the jar file or directory where 
   the jar file has been extracted.</description>
				</comment>
			</method>
			<method visibility="public" name="getManifest" fulltype="java.util.jar.Manifest" type="Manifest">
				<comment>
					<description>Returns the Manifest file found in the &quot;META-INF&quot; directory. The
   Manifest file contains metadata for the jar file including version
   numbers, vendor name, etc. You can loop through properties in the
   Manifest like this:
   &lt;pre&gt;
    java.io.File file = new java.io.File(&quot;/Drivers/h2/h2-1.3.162.jar&quot;);
    java.util.jar.JarFile jar = new javaxt.io.Jar(file);
    java.util.jar.Manifest manifest = jar.getManifest();

    System.out.println(&quot;\r\nMain Attributes:\r\n--------------------------&quot;);
    printAttributes(manifest.getMainAttributes());


    System.out.println(&quot;\r\nOther Attributes:\r\n--------------------------&quot;);
    java.util.Map&amp;lt;String, java.util.jar.Attributes&amp;gt; entries = manifest.getEntries();
    java.util.Iterator&amp;lt;String&amp;gt; it = entries.keySet().iterator();
    while (it.hasNext()){
        String key = it.next();
        printAttributes(entries.get(key));
        System.out.println();
    }

    jar.close();

    private static void printAttributes(java.util.jar.Attributes attributes){
        java.util.Iterator it = attributes.keySet().iterator();
        while (it.hasNext()){
            java.util.jar.Attributes.Name key = (java.util.jar.Attributes.Name) it.next();
            Object value = attributes.get(key);
            System.out.println(key + &quot;:  &quot; + value);
        }
    }
   &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="getVersion" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the version number of the jar file, if available. Two different
  strategies are used to find the version number. First strategy is to
  parse the jar file manifest and return the value of the
  &quot;Implementation-Version&quot; or &quot;Bundle-Version&quot;, whichever is found first.
  If no version information is found in the manifest, an attempt is made
  to parse the file name. Returns a null is no version information is
  available.</description>
				</comment>
			</method>
			<method visibility="public" name="getEntries" fulltype="javaxt.io.Jar.Entry[]" type="Jar.Entry">
				<comment>
					<description>Used to return a list of all the entries found in the jar file.</description>
				</comment>
			</method>
			<method visibility="public" name="getEntry" fulltype="javaxt.io.Jar.Entry" type="Jar.Entry">
				<comment>
					<description>Used to retrieve a single entry from the jar file.</description>
				</comment>
				<params>
					<param name="Entry" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getEntry" fulltype="javaxt.io.Jar.Entry" type="Jar.Entry">
				<comment>
					<description>Used to retrieve a single entry from the jar file.</description>
					<attribute name="@param">
						<description>Package Name of the package or directory in the jar file 
  (e.g. &quot;javaxt.io&quot;). Null values and zero length strings default to the
  the root directory.</description>
					</attribute>
					<attribute name="@param">
						<description>Entry Name of the class/file found in the given package  
  (e.g. &quot;Jar.class&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="Package" comment="Name of the package or directory in the jar file 
  (e.g. &quot;javaxt.io&quot;). Null values and zero length strings default to the
  the root directory." fulltype="java.lang.String" type="String" />
					<param name="Entry" comment="Name of the class/file found in the given package  
  (e.g. &quot;Jar.class&quot;)." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getEntry" fulltype="javaxt.io.Jar.Entry" type="Jar.Entry">
				<comment>
					<description>Used to retrieve a single entry from the jar file.</description>
				</comment>
				<params>
					<param name="Class" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the path to the jar file.</description>
				</comment>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Jar.Entry" type="Jar.Entry">
			<comment>
				<description>Used to represent an entry in a jar/war file. The jar file might be
  zipped or unpacked by a web server.</description>
			</comment>
			<methods>
				<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date" />
				<method visibility="public" name="checksum" fulltype="long" type="long">
					<comment>
						<description>Returns a long value representing a cyclic redundancy check
 (CRC-32 checksum) of the uncompressed entry data, or -1 if not known.</description>
					</comment>
				</method>
				<method visibility="public" name="getFile" fulltype="java.io.File" type="File" />
				<method visibility="public" name="getBytes" fulltype="byte[]" type="byte" />
				<method visibility="public" name="extractFile" fulltype="void" type="void">
					<comment>
						<description>Used to extract the zip entry to a file.</description>
					</comment>
					<params>
						<param name="destination" fulltype="java.io.File" type="File" />
					</params>
				</method>
				<method visibility="public" name="setText" fulltype="void" type="void">
					<params>
						<param name="text" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
					<comment>
						<description>Used to extract the contents to a string.</description>
					</comment>
				</method>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Jar.Entry" type="Jar.Entry">
		<comment>
			<description>Used to represent an entry in a jar/war file. The jar file might be
  zipped or unpacked by a web server.</description>
		</comment>
		<methods>
			<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date" />
			<method visibility="public" name="checksum" fulltype="long" type="long">
				<comment>
					<description>Returns a long value representing a cyclic redundancy check
 (CRC-32 checksum) of the uncompressed entry data, or -1 if not known.</description>
				</comment>
			</method>
			<method visibility="public" name="getFile" fulltype="java.io.File" type="File" />
			<method visibility="public" name="getBytes" fulltype="byte[]" type="byte" />
			<method visibility="public" name="extractFile" fulltype="void" type="void">
				<comment>
					<description>Used to extract the zip entry to a file.</description>
				</comment>
				<params>
					<param name="destination" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method visibility="public" name="setText" fulltype="void" type="void">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to extract the contents to a string.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Image" type="Image">
		<comment>
			<description>Used to open, resize, rotate, crop and save images.</description>
		</comment>
		<fields>
			<field static="true" visibility="public" name="InputFormats" fulltype="java.lang.String[]" type="String" />
			<field static="true" visibility="public" name="OutputFormats" fulltype="java.lang.String[]" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="Image">
				<comment>
					<description>Creates a new instance of image using an existing image</description>
				</comment>
				<params>
					<param name="PathToImageFile" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="File" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="InputStream" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="byteArray" fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="bufferedImage" fulltype="java.awt.image.BufferedImage" type="BufferedImage" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="img" fulltype="java.awt.image.RenderedImage" type="RenderedImage" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<comment>
					<description>Used to create a new image from text.</description>
					<attribute name="@param">
						<description>fontName Name of the font you with to use. Note that you can get
  a list of available fonts like this:
   &lt;pre&gt;
    for (String fontName : GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()){
        System.out.println(fontName);
    }   
   &lt;/pre&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="fontName" comment="Name of the font you with to use. Note that you can get
  a list of available fonts like this:
   &lt;pre&gt;
    for (String fontName : GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()){
        System.out.println(fontName);
    }   
   &lt;/pre&gt;" fulltype="java.lang.String" type="String" />
					<param name="fontSize" fulltype="int" type="int" />
					<param name="r" fulltype="int" type="int" />
					<param name="g" fulltype="int" type="int" />
					<param name="b" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="Image">
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="font" fulltype="java.awt.Font" type="Font" />
					<param name="r" fulltype="int" type="int" />
					<param name="g" fulltype="int" type="int" />
					<param name="b" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="setBackgroundColor" fulltype="void" type="void">
				<comment>
					<description>Used to set the background color. Creates an image layer and inserts it
  under the existing graphic. This method should only be called once.</description>
				</comment>
				<params>
					<param name="r" fulltype="int" type="int" />
					<param name="g" fulltype="int" type="int" />
					<param name="b" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getInputFormats" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Used to retrieve a list of supported input (read) formats.</description>
				</comment>
			</method>
			<method visibility="public" name="getOutputFormats" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Used to retrieve a list of supported output (write) formats.</description>
				</comment>
			</method>
			<method visibility="public" name="getWidth" fulltype="int" type="int">
				<comment>
					<description>Returns the width of the image, in pixels.</description>
				</comment>
			</method>
			<method visibility="public" name="getHeight" fulltype="int" type="int">
				<comment>
					<description>Returns the height of the image, in pixels.</description>
				</comment>
			</method>
			<method visibility="public" name="addText" fulltype="void" type="void">
				<comment>
					<description>Used to add text to the image at a given position.</description>
					<attribute name="@param">
						<description>x Lower left coordinate of the text</description>
					</attribute>
					<attribute name="@param">
						<description>y Lower left coordinate of the text</description>
					</attribute>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="x" comment="Lower left coordinate of the text" fulltype="int" type="int" />
					<param name="y" comment="Lower left coordinate of the text" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addText" fulltype="void" type="void">
				<comment>
					<description>Used to add text to the image at a given position.</description>
					<attribute name="@param">
						<description>x Lower left coordinate of the text</description>
					</attribute>
					<attribute name="@param">
						<description>y Lower left coordinate of the text</description>
					</attribute>
					<attribute name="@param">
						<description>fontName Name of the font face (e.g. &quot;Tahoma&quot;, &quot;Helvetica&quot;, etc.)</description>
					</attribute>
					<attribute name="@param">
						<description>fontSize Size of the font</description>
					</attribute>
					<attribute name="@param">
						<description>r Value for the red channel (0-255)</description>
					</attribute>
					<attribute name="@param">
						<description>g Value for the green channel (0-255)</description>
					</attribute>
					<attribute name="@param">
						<description>b Value for the blue channel (0-255)</description>
					</attribute>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="x" comment="Lower left coordinate of the text" fulltype="int" type="int" />
					<param name="y" comment="Lower left coordinate of the text" fulltype="int" type="int" />
					<param name="fontName" comment="Name of the font face (e.g. &quot;Tahoma&quot;, &quot;Helvetica&quot;, etc.)" fulltype="java.lang.String" type="String" />
					<param name="fontSize" comment="Size of the font" fulltype="int" type="int" />
					<param name="r" comment="Value for the red channel (0-255)" fulltype="int" type="int" />
					<param name="g" comment="Value for the green channel (0-255)" fulltype="int" type="int" />
					<param name="b" comment="Value for the blue channel (0-255)" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addText" fulltype="void" type="void">
				<comment>
					<description>Used to add text to the image at a given position.</description>
					<attribute name="@param">
						<description>x Lower left coordinate of the text</description>
					</attribute>
					<attribute name="@param">
						<description>y Lower left coordinate of the text</description>
					</attribute>
					<attribute name="@param">
						<description>font Font</description>
					</attribute>
					<attribute name="@param">
						<description>r Value for the red channel (0-255)</description>
					</attribute>
					<attribute name="@param">
						<description>g Value for the green channel (0-255)</description>
					</attribute>
					<attribute name="@param">
						<description>b Value for the blue channel (0-255)</description>
					</attribute>
				</comment>
				<params>
					<param name="text" fulltype="java.lang.String" type="String" />
					<param name="x" comment="Lower left coordinate of the text" fulltype="int" type="int" />
					<param name="y" comment="Lower left coordinate of the text" fulltype="int" type="int" />
					<param name="font" comment="Font" fulltype="java.awt.Font" type="Font" />
					<param name="r" comment="Value for the red channel (0-255)" fulltype="int" type="int" />
					<param name="g" comment="Value for the green channel (0-255)" fulltype="int" type="int" />
					<param name="b" comment="Value for the blue channel (0-255)" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addPoint" fulltype="void" type="void">
				<comment>
					<description>Simple drawing function used to set color of a specific pixel in the 
   image.</description>
				</comment>
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="r" fulltype="int" type="int" />
					<param name="g" fulltype="int" type="int" />
					<param name="b" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setColor" fulltype="void" type="void">
				<comment>
					<description>Used to set the color (ARGB value) for a specific pixel in the image.
   Note that input x,y values are relative to the upper left corner of the
   image, starting at 0,0.</description>
				</comment>
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="color" fulltype="java.awt.Color" type="Color" />
				</params>
			</method>
			<method visibility="public" name="getColor" fulltype="java.awt.Color" type="Color">
				<comment>
					<description>Used to retrieve the color (ARGB) values for a specific pixel in the 
   image. Returns a java.awt.Color object. Note that input x,y values are
   relative to the upper left corner of the image, starting at 0,0.</description>
				</comment>
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addImage" fulltype="void" type="void">
				<comment>
					<description>Used to add an image &quot;overlay&quot; to the existing image at a given 
   position. This method can also be used to create image mosiacs.</description>
				</comment>
				<params>
					<param name="in" fulltype="java.awt.image.BufferedImage" type="BufferedImage" />
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="expand" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addImage" fulltype="void" type="void">
				<comment>
					<description>Used to add an image &quot;overlay&quot; to the existing image at a given 
   position. This method can also be used to create image mosiacs.</description>
				</comment>
				<params>
					<param name="in" fulltype="javaxt.io.Image" type="Image" />
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="expand" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="rotate" fulltype="void" type="void">
				<comment>
					<description>Used to rotate the image (clockwise). Rotation angle is specified in 
   degrees relative to the top of the image.</description>
				</comment>
				<params>
					<param name="Degrees" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="rotateClockwise" fulltype="void" type="void">
				<comment>
					<description>Rotates the image 90 degrees clockwise</description>
				</comment>
			</method>
			<method visibility="public" name="rotateCounterClockwise" fulltype="void" type="void">
				<comment>
					<description>Rotates the image -90 degrees</description>
				</comment>
			</method>
			<method visibility="public" name="rotate" fulltype="void" type="void">
				<comment>
					<description>Used to automatically rotate the image based on the image metadata
   (EXIF Orientation tag).</description>
				</comment>
			</method>
			<method visibility="public" name="setWidth" fulltype="void" type="void">
				<comment>
					<description>Resizes the image to a given width. The original aspect ratio is 
   maintained.</description>
				</comment>
				<params>
					<param name="Width" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setHeight" fulltype="void" type="void">
				<comment>
					<description>Resizes the image to a given height. The original aspect ratio is 
   maintained.</description>
				</comment>
				<params>
					<param name="Height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="resize" fulltype="void" type="void">
				<comment>
					<description>Used to resize an image. Does NOT automatically retain the original 
   aspect ratio.</description>
				</comment>
				<params>
					<param name="Width" fulltype="int" type="int" />
					<param name="Height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="resize" fulltype="void" type="void">
				<comment>
					<description>Used to resize an image. Provides the option to maintain the original 
   aspect ratio (relative to the output width).</description>
				</comment>
				<params>
					<param name="Width" fulltype="int" type="int" />
					<param name="Height" fulltype="int" type="int" />
					<param name="maintainRatio" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setCorners" fulltype="void" type="void">
				<comment>
					<description>Used to skew an image by updating the corner coordinates. Coordinates are 
   supplied in clockwise order starting from the upper left corner.</description>
				</comment>
				<params>
					<param name="x0" fulltype="float" type="float" />
					<param name="y0" fulltype="float" type="float" />
					<param name="x1" fulltype="float" type="float" />
					<param name="y1" fulltype="float" type="float" />
					<param name="x2" fulltype="float" type="float" />
					<param name="y2" fulltype="float" type="float" />
					<param name="x3" fulltype="float" type="float" />
					<param name="y3" fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="getCorners" fulltype="float[]" type="float">
				<comment>
					<description>Used to retrieve the corner coordinates of the image. Coordinates are 
   supplied in clockwise order starting from the upper left corner. This 
   information is particularly useful for generating drop shadows, inner 
   and outer glow, and reflections.
   NOTE: Coordinates are not updated after resize(), rotate(), or addImage()</description>
				</comment>
			</method>
			<method visibility="public" name="sharpen" fulltype="void" type="void">
				<comment>
					<description>Used to sharpen the image using a 3x3 kernal.</description>
				</comment>
			</method>
			<method visibility="public" name="desaturate" fulltype="void" type="void">
				<comment>
					<description>Used to completely desaturate an image (creates a gray-scale image).</description>
				</comment>
			</method>
			<method visibility="public" name="desaturate" fulltype="void" type="void">
				<comment>
					<description>Used to desaturate an image by a specified percentage (expressed as 
   a double or float). The larger the percentage, the greater the 
   desaturation and the &quot;grayer&quot; the image. Valid ranges are from 0-1.</description>
				</comment>
				<params>
					<param name="percent" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="setOpacity" fulltype="void" type="void">
				<params>
					<param name="percent" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="flip" fulltype="void" type="void">
				<comment>
					<description>Used to flip an image along it&apos;s y-axis (horizontal). Vertical flipping 
   is supported via the rotate method (i.e. rotate +/-180).</description>
				</comment>
			</method>
			<method visibility="public" name="crop" fulltype="void" type="void">
				<comment>
					<description>Used to subset or crop an image.</description>
				</comment>
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="copy" fulltype="javaxt.io.Image" type="Image">
				<comment>
					<description>Returns a copy of the current image.</description>
				</comment>
			</method>
			<method visibility="public" name="copyRect" fulltype="javaxt.io.Image" type="Image">
				<comment>
					<description>Returns a copy of a given rectangle.</description>
				</comment>
				<params>
					<param name="x" fulltype="int" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="trim" fulltype="void" type="void">
				<comment>
					<description>Used to remove excess pixels around an image by cropping the image to its
  &quot;true&quot; extents. Crop bounds are determined by finding the first non-null
  or non-black pixel on each side of the image.</description>
				</comment>
			</method>
			<method visibility="public" name="trim" fulltype="void" type="void">
				<comment>
					<description>Used to remove excess pixels around an image by cropping the image to its
  &quot;true&quot; extents. Crop bounds are determined by finding pixels that *don&apos;t*
  match the input color. For example, you can trim off excess black pixels 
  around an image by specifying an rgb value of 0,0,0. Similarly, you can
  trim off pure white pixels around an image by specifying an rgb value of
  255,255,255. Note that transparent pixels are considered as null values
  and will be automatically trimmed from the edges.</description>
				</comment>
				<params>
					<param name="r" fulltype="int" type="int" />
					<param name="g" fulltype="int" type="int" />
					<param name="b" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBufferedImage" fulltype="java.awt.image.BufferedImage" type="BufferedImage">
				<comment>
					<description>Returns the java.awt.image.BufferedImage represented by the current
   image.</description>
				</comment>
			</method>
			<method visibility="public" name="getImage" fulltype="java.awt.Image" type="Image">
				<comment>
					<description>Returns a java.awt.Image copy of the current image.</description>
				</comment>
			</method>
			<method visibility="public" name="getRenderedImage" fulltype="java.awt.image.RenderedImage" type="RenderedImage">
				<comment>
					<description>Returns a java.awt.image.RenderedImage copy of the current image.</description>
				</comment>
			</method>
			<method visibility="public" name="getBufferedImage" fulltype="java.awt.image.BufferedImage" type="BufferedImage">
				<comment>
					<description>Used to retrieve a scaled copy of the current image.</description>
				</comment>
				<params>
					<param name="width" fulltype="int" type="int" />
					<param name="height" fulltype="int" type="int" />
					<param name="maintainRatio" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getByteArray" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the image as a jpeg byte array. Output quality is set using
  the setOutputQuality method.</description>
				</comment>
			</method>
			<method visibility="public" name="getByteArray" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the image as a byte array.</description>
				</comment>
				<params>
					<param name="format" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="saveAs" fulltype="void" type="void">
				<comment>
					<description>Exports the image to a file. Output format is determined by the output 
   file extension.</description>
				</comment>
				<params>
					<param name="PathToImageFile" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="saveAs" fulltype="void" type="void">
				<comment>
					<description>Exports the image to a file. Output format is determined by the output 
   file extension.</description>
				</comment>
				<params>
					<param name="OutputFile" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method visibility="public" name="setOutputQuality" fulltype="void" type="void">
				<comment>
					<description>Used to set the output quality/compression ratio. Only applies when 
   creating JPEG images. Applied only when writing the image to a file or 
   byte array.</description>
				</comment>
				<params>
					<param name="percentage" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to compare this image to another. If the ARGB values match, this 
   method will return true.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getIIOMetadata" fulltype="javax.imageio.metadata.IIOMetadata" type="IIOMetadata">
				<comment>
					<description>Returns the raw, javax.imageio.metadata.IIOMetadata associated with this
 image. You can iterate through the metadata using an xml parser like this:
   &lt;pre&gt;
    IIOMetadata metadata = image.getMetadata().getIIOMetadata();
    for (String name : metadata.getMetadataFormatNames()) {
        System.out.println( &quot;Format name: &quot; + name );
        org.w3c.dom.Node metadataNode = metadata.getAsTree(name);
        System.out.println(javaxt.xml.DOM.getNodeValue(metadataNode));
    }
   &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="setIIOMetadata" fulltype="void" type="void">
				<comment>
					<description>Used to set/update the raw javax.imageio.metadata.IIOMetadata associated
  with this image.</description>
				</comment>
				<params>
					<param name="metadata" fulltype="javax.imageio.metadata.IIOMetadata" type="IIOMetadata" />
				</params>
			</method>
			<method visibility="public" name="getIptcData" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the raw IPTC byte array (marker 0xED).</description>
				</comment>
			</method>
			<method visibility="public" name="getIptcTags" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Used to parse IPTC metadata and return a list of key/value pairs found
  in the metadata. You can retrieve specific IPTC metadata values like 
  this:
   &lt;pre&gt;
    javaxt.io.Image image = new javaxt.io.Image(&quot;/temp/image.jpg&quot;);
    java.util.HashMap&amp;lt;Integer, String&amp;gt; iptc = image.getIptcTags();
    System.out.println(&quot;Date: &quot; + iptc.get(0x0237));
    System.out.println(&quot;Caption: &quot; + iptc.get(0x0278));
    System.out.println(&quot;Copyright: &quot; + iptc.get(0x0274));
   &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="getExifData" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the raw EXIF byte array (marker 0xE1).</description>
				</comment>
			</method>
			<method visibility="public" name="getExifTags" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Used to parse EXIF metadata and return a list of key/value pairs found
  in the metadata. Values can be Strings, Integers, or raw Byte Arrays.
  You can retrieve specific EXIF metadata values like this:
   &lt;pre&gt;
    javaxt.io.Image image = new javaxt.io.Image(&quot;/temp/image.jpg&quot;);
    java.util.HashMap&amp;lt;Integer, Object&amp;gt; exif = image.getExifTags();
    System.out.println(&quot;Date: &quot; + exif.get(0x0132));
    System.out.println(&quot;Camera: &quot; + exif.get(0x0110));
    System.out.println(&quot;Focal Length: &quot; + exif.get(0x920A));
    System.out.println(&quot;F-Stop: &quot; + exif.get(0x829D));
    System.out.println(&quot;Shutter Speed: &quot; + exif.get(0x829A));
   &lt;/pre&gt;
 Note that the EXIF MakerNote is not parsed.</description>
				</comment>
			</method>
			<method visibility="public" name="getGpsTags" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Used to parse EXIF metadata and return a list of key/value pairs 
  associated with GPS metadata. Values can be Strings, Integers, or raw
  Byte Arrays.</description>
				</comment>
			</method>
			<method visibility="public" name="getGPSCoordinate" fulltype="double[]" type="double">
				<comment>
					<description>Returns the x/y (lon/lat) coordinate tuple for the image. Value is
  derived from EXIF GPS metadata (tags 0x0001, 0x0002, 0x0003, 0x0004).</description>
				</comment>
			</method>
			<method visibility="public" name="getGPSDatum" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the datum associated with the GPS coordinate. Value is 
  derived from EXIF GPS metadata (tag 0x0012).</description>
				</comment>
			</method>
			<method visibility="public" name="getUnknownTags" fulltype="javax.imageio.metadata.IIOMetadataNode[]" type="IIOMetadataNode">
				<comment>
					<description>Returns a list of &quot;unknown&quot; IIOMetadataNodes for a given MarkerTag. You
  can use this method to retrieve EXIF, IPTC, XPM, and other format
  specific metadata. Example:
   &lt;pre&gt;
    byte[] IptcData = (byte[]) metadata.getUnknownTags(0xED)[0].getUserObject();
    byte[] ExifData = (byte[]) metadata.getUnknownTags(0xE1)[0].getUserObject();
   &lt;/pre&gt;</description>
				</comment>
				<params>
					<param name="MarkerTag" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMetadataByTagName" fulltype="javax.imageio.metadata.IIOMetadataNode[]" type="IIOMetadataNode">
				<comment>
					<description>Returns a list of IIOMetadataNodes for a given tag name (e.g. &quot;Chroma&quot;,
  &quot;Compression&quot;, &quot;Data&quot;, &quot;Dimension&quot;, &quot;Transparency&quot;, etc).
   &lt;pre&gt;
  //Print unknown tags
    for (IIOMetadataNode unknownNode : metadata.getMetadataByTagName(&quot;unknown&quot;)){
        int marker = Integer.parseInt(javaxt.xml.DOM.getAttributeValue(unknownNode, &quot;MarkerTag&quot;));
        System.out.println(marker + &quot;\t&quot; + &quot;0x&quot; + Integer.toHexString(marker));
    }
   &lt;/pre&gt;</description>
				</comment>
				<params>
					<param name="tagName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAttributeValue" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to return the value of a given node attribute. The search is case
   insensitive. If no match is found, returns an empty string.</description>
				</comment>
				<params>
					<param name="attrCollection" fulltype="org.w3c.dom.NamedNodeMap" type="NamedNodeMap" />
					<param name="attrName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.File" type="File">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>Used to represent a single file on a file system. In many ways, this class 
   is an extension of the java.io.File class. However, unlike the java.io.File 
   class, this object provides functions that are relevant and specific to
   files (not directories).</description>
		</comment>
		<fields>
			<field final="true" visibility="public" name="PathSeparator" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="public" name="LineSeperator" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="File">
				<comment>
					<description>Creates a new File instance by converting the given pathname string into 
  an abstract pathname.</description>
				</comment>
				<params>
					<param name="Path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="File">
				<comment>
					<description>Instantiates this class using a java.io.File. Please use the Directory
  class for directories. Example:
 &lt;pre&gt;if (file.isDirectory()) new Directory(file);&lt;/pre&gt;</description>
				</comment>
				<params>
					<param name="File" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<constructor visibility="public" name="File">
				<comment>
					<description>Creates a new File instance from a parent abstract pathname and a child 
  pathname string.</description>
				</comment>
				<params>
					<param name="Parent" fulltype="java.io.File" type="File" />
					<param name="Child" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="File">
				<params>
					<param name="Parent" fulltype="javaxt.io.Directory" type="Directory" />
					<param name="Child" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="File">
				<params>
					<param name="Parent" fulltype="java.lang.String" type="String" />
					<param name="Child" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the file, excluding the path.</description>
				</comment>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the file, excluding the path.</description>
					<attribute name="@param">
						<description>IncludeFileExtension If true, includes the file extension. 
   Otherwise, will return the file name without the extension.</description>
					</attribute>
				</comment>
				<params>
					<param name="IncludeFileExtension" comment="If true, includes the file extension. 
   Otherwise, will return the file name without the extension." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to retrieve the path to the file, excluding the file name. Appends 
   a file separator to the end of the string.</description>
				</comment>
			</method>
			<method visibility="public" name="getDirectory" fulltype="javaxt.io.Directory" type="Directory">
				<comment>
					<description>Returns the file&apos;s parent directory. Same as getParentDirectory()</description>
				</comment>
			</method>
			<method visibility="public" name="getParentDirectory" fulltype="javaxt.io.Directory" type="Directory">
				<comment>
					<description>Returns the file&apos;s parent directory.</description>
				</comment>
			</method>
			<method visibility="public" name="toFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns the java.io.File representation of this object.</description>
				</comment>
			</method>
			<method visibility="public" name="getExtension" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the file&apos;s extension, excluding the last dot/period 
   (e.g. &quot;C:\image.jpg&quot; will return &quot;jpg&quot;). Returns a zero-length string
   if there is no extension.</description>
				</comment>
			</method>
			<method visibility="public" name="getSize" fulltype="long" type="long">
				<comment>
					<description>Returns the size of the file, in bytes.</description>
				</comment>
			</method>
			<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the file was last modified. If the file does
  not exist, returns a date of Jan 1, 1970.</description>
				</comment>
			</method>
			<method visibility="public" name="setDate" fulltype="void" type="void">
				<comment>
					<description>Used to set/update the last modified date.</description>
				</comment>
				<params>
					<param name="lastModified" fulltype="java.util.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="exists" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether a file exists. Returns false if the file
   system can&apos;t find the file or if the object is a directory.</description>
				</comment>
			</method>
			<method visibility="public" name="isHidden" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to check whether the file is hidden.</description>
				</comment>
			</method>
			<method visibility="public" name="isReadOnly" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to check whether the file has read permissions.</description>
				</comment>
			</method>
			<method visibility="public" name="isExecutable" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to check whether the file has execute permissions. Note that this
  method is not supported by JDK 1.5 or lower. Instead, the method will
  return false.</description>
				</comment>
			</method>
			<method visibility="public" name="isLink" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the file is actually a link to another file.
   Returns true for symbolic links, Windows junctions, and Windows
   shortcuts.</description>
				</comment>
			</method>
			<method visibility="public" name="getLink" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns the target of a symbolic link, Windows junction, or Windows
   shortcut.</description>
				</comment>
			</method>
			<method visibility="public" name="delete" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to delete the file. Warning: this operation is irrecoverable.</description>
				</comment>
			</method>
			<method visibility="public" name="setBufferSize" fulltype="void" type="void">
				<comment>
					<description>Used to set the size of the buffer used to read/write bytes. The default
  is 1MB (1,048,576 bytes)</description>
				</comment>
				<params>
					<param name="numBytes" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="moveTo" fulltype="javaxt.io.File" type="File">
				<comment>
					<description>Used to move the file to a different directory.</description>
				</comment>
				<params>
					<param name="Destination" fulltype="javaxt.io.Directory" type="Directory" />
				</params>
			</method>
			<method visibility="public" name="copyTo" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to create a copy of this file.</description>
				</comment>
				<params>
					<param name="Destination" fulltype="javaxt.io.Directory" type="Directory" />
					<param name="Overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="copyTo" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to create a copy of this file.</description>
				</comment>
				<params>
					<param name="Destination" fulltype="javaxt.io.File" type="File" />
					<param name="Overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="rename" fulltype="javaxt.io.File" type="File">
				<comment>
					<description>Used to rename a file - existing File Name is replaced with input
   FileName. Note that this method is NOT equivalent to the java.io.File
   &quot;renameTo&quot; method.</description>
					<attribute name="@param">
						<description>FileName The new file name (including the file extension).</description>
					</attribute>
				</comment>
				<params>
					<param name="FileName" comment="The new file name (including the file extension)." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getBufferedWriter" fulltype="java.io.BufferedWriter" type="BufferedWriter">
				<comment>
					<description>Used to instantiate a BufferedWriter for this file.</description>
				</comment>
				<params>
					<param name="charsetName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getBufferedReader" returncomment="BufferedReader or null" fulltype="java.io.BufferedReader" type="BufferedReader">
				<comment>
					<description>Used to extract the contents of the file into a BufferedReader.
   &lt;pre&gt;
   BufferedReader br = file.getBufferedReader(&quot;UTF-8&quot;);
   String strLine;
   while ((strLine = br.readLine()) != null){
      System.out.println(strLine);
   }
   &lt;/pre&gt;</description>
					<attribute name="@return">
						<description>BufferedReader or null</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBufferedReader" fulltype="java.io.BufferedReader" type="BufferedReader">
				<comment>
					<description>Used to extract the contents of the file into a BufferedReader.
   &lt;pre&gt;
   BufferedReader br = file.getBufferedReader(&quot;UTF-8&quot;);
   String strLine;
   while ((strLine = br.readLine()) != null){
      System.out.println (strLine);
   }
   &lt;/pre&gt;
   WARNING: This method will never throw an error.</description>
					<attribute name="@param">
						<description>charsetName Name of the character encoding used to read the file.
   Examples include UTF-8 and ISO-8859-1</description>
					</attribute>
				</comment>
				<params>
					<param name="charsetName" comment="Name of the character encoding used to read the file.
   Examples include UTF-8 and ISO-8859-1" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getBufferedImage" fulltype="java.awt.image.BufferedImage" type="BufferedImage" />
			<method visibility="public" name="getImage" fulltype="javaxt.io.Image" type="Image">
				<comment>
					<description>Used to open the file and read the contents into an image.</description>
				</comment>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to open the file and read the contents into a string.</description>
				</comment>
			</method>
			<method visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to extract the contents of the file as a String. Returns an empty
  String if the file is empty or the contents cannot be converted to a
  String.</description>
					<attribute name="@param">
						<description>charsetName Name of the character encoding used to read the file.
  Examples include UTF-8 and ISO-8859-1</description>
					</attribute>
				</comment>
				<params>
					<param name="charsetName" comment="Name of the character encoding used to read the file.
  Examples include UTF-8 and ISO-8859-1" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getXML" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Returns an XML DOM Document (org.w3c.dom.Document) represented by this
  file. Returns a null if the file contents cannot be converted into a
  DOM Document.</description>
				</comment>
			</method>
			<method visibility="public" name="getBytes" fulltype="java.io.ByteArrayOutputStream" type="ByteArrayOutputStream">
				<comment>
					<description>Returns a ByteArrayOutputStream for the file. Returns a null if a
  ByteArrayOutputStream cannot be created (e.g. file does not exist).</description>
				</comment>
			</method>
			<method visibility="public" name="checksum" fulltype="long" type="long">
				<comment>
					<description>Returns a long value representing a cyclic redundancy check
 (CRC-32 checksum) of the file, or -1 if not known.</description>
				</comment>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<params>
					<param name="bas" fulltype="java.io.ByteArrayOutputStream" type="ByteArrayOutputStream" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<params>
					<param name="bytes" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<params>
					<param name="input" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to write text to a file. Uses UTF-8 character encoding. Use the
  other write method to specify a different character encoding (e.g.
  ISO-8859-1).</description>
				</comment>
				<params>
					<param name="Text" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to write text to a file. Allows users to specify character encoding.</description>
					<attribute name="@param">
						<description>charsetName Name of the character encoding used to read the file.
  Examples include UTF-8 and ISO-8859-1. If null, the writer will use the
  default character encoding defined on the host machine.</description>
					</attribute>
				</comment>
				<params>
					<param name="Text" fulltype="java.lang.String" type="String" />
					<param name="charsetName" comment="Name of the character encoding used to read the file.
  Examples include UTF-8 and ISO-8859-1. If null, the writer will use the
  default character encoding defined on the host machine." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to write an XML DOM Document to a file.</description>
				</comment>
				<params>
					<param name="xml" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<params>
					<param name="Content" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Used to write an image to a file.</description>
				</comment>
				<params>
					<param name="Image" fulltype="java.awt.image.BufferedImage" type="BufferedImage" />
				</params>
			</method>
			<method visibility="public" name="MapPath" fulltype="java.lang.String" type="String">
				<params>
					<param name="RelPath" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getInputStream" fulltype="java.io.FileInputStream" type="FileInputStream">
				<comment>
					<description>Returns a new FileInputStream Object</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="getOutputStream" fulltype="java.io.FileOutputStream" type="FileOutputStream">
				<comment>
					<description>Returns a new FileOutputStream Object</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the full file path (including the file name)</description>
				</comment>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method visibility="public" name="compareTo" fulltype="int" type="int">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getContentType" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the mime type associated with the file extension. This method 
   only covers the most common/popular mime types. The returned mime type
   is NOT authoritative.</description>
				</comment>
			</method>
			<method visibility="public" name="setLastModifiedTime" fulltype="void" type="void">
				<comment>
					<description>Used to update the timestamp of when the file was last modified.</description>
				</comment>
				<params>
					<param name="date" fulltype="java.util.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="getLastModifiedTime" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the file was last modified. This is
  identical to the getDate() method.</description>
				</comment>
			</method>
			<method visibility="public" name="getCreationTime" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the file was first created. Returns a null
  if the timestamp is not available.</description>
				</comment>
			</method>
			<method visibility="public" name="getLastAccessTime" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the file was last accessed. Returns a null
  if the timestamp is not available.</description>
				</comment>
			</method>
			<method visibility="public" name="getFlags" fulltype="java.util.HashSet" type="HashSet">
				<comment>
					<description>Returns keywords representing file attributes (e.g. &quot;READONLY&quot;, &quot;HIDDEN&quot;,
  etc).</description>
				</comment>
			</method>
			<method visibility="public" name="getFileAttributes" fulltype="javaxt.io.File.FileAttributes" type="File.FileAttributes">
				<comment>
					<description>Returns file attributes such as when the file was first created and when
  it was last accessed. File attributes are cached for up to one second.
  This provides users the ability to retrieve multiple attributes at once. 
  Without caching, we would have to ping the file system every time we call 
  getLastAccessTime(), getLastAccessTime(), getLastWriteTime(), etc. The
  cached attributes are automatically updated when the file is updated or
  deleted by this class.</description>
				</comment>
			</method>
			<method static="true" synchronized="true" visibility="protected" name="loadDLL" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to load the javaxt-core.dll. Returns a boolean to indicate load
  status. Note that the dll is only loaded once per JVM so it should be
  safe to call this method multiple times.</description>
				</comment>
			</method>
			<method static="true" visibility="protected" name="GetSharedDrives" fulltype="java.lang.String" type="String">
				<comment>
					<description>JNI entry point to retrieve a list of shared drives on a server.</description>
				</comment>
				<params>
					<param name="serverName" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="protected" name="GetNetworkDrives" fulltype="java.lang.String" type="String">
				<comment>
					<description>JNI entry point to retrieve a list of network drives mounted to the host.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method static="true" visibility="protected" name="GetFiles" fulltype="java.lang.String" type="String">
				<comment>
					<description>JNI entry point to retrieve a list of files and directories.</description>
				</comment>
				<params>
					<param name="lpPathName" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.File.FileAttributes" type="File.FileAttributes">
			<comment>
				<description>Used to encapsulate extended file attributes. On unix and linux machines, 
  this class is used to parse the output from ls. On windows, this class 
  uses a JNI to return WIN32_FILE_ATTRIBUTE_DATA:

 &lt;pre&gt;
    typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
      DWORD dwFileAttributes;
      FILETIME ftCreationTime;
      FILETIME ftLastAccessTime;
      FILETIME ftLastWriteTime;
      DWORD nFileSizeHigh;
      DWORD nFileSizeLow;
    } WIN32_FILE_ATTRIBUTE_DATA;
 &lt;/pre&gt;</description>
			</comment>
			<fields>
				<field visibility="protected" name="lastUpdate" fulltype="long" type="long" />
			</fields>
			<methods>
				<constructor visibility="public" name="File.FileAttributes">
					<params>
						<param name="path" fulltype="java.lang.String" type="String" />
					</params>
					<exceptions>
						<exception fulltype="java.lang.Exception" type="Exception" />
					</exceptions>
				</constructor>
				<method visibility="public" name="getSize" fulltype="long" type="long" />
				<method visibility="public" name="getCreationTime" fulltype="java.util.Date" type="Date" />
				<method visibility="public" name="getLastAccessTime" fulltype="java.util.Date" type="Date" />
				<method visibility="public" name="getLastWriteTime" fulltype="java.util.Date" type="Date" />
				<method visibility="public" name="isDirectory" fulltype="boolean" type="boolean" />
				<method visibility="public" name="isHidden" fulltype="boolean" type="boolean" />
				<method visibility="public" name="isReadOnly" fulltype="boolean" type="boolean" />
				<method visibility="public" name="getFlags" fulltype="java.util.HashSet" type="HashSet" />
				<method visibility="public" name="getLink" fulltype="java.io.File" type="File" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.File.LnkParser" type="File.LnkParser">
			<comment>
				<description>Class used to parse a windows lnk files (aka shortcuts). Credit:
   http://stackoverflow.com/a/672775/</description>
			</comment>
			<methods>
				<constructor visibility="public" name="File.LnkParser">
					<params>
						<param name="lnk" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<constructor visibility="public" name="File.LnkParser">
					<comment>
						<description>Instantiates the class by parsing the Windows shortcut (lnk) file.</description>
						<attribute name="@param">
							<description>lnk File representing the full path to the shortcut file.</description>
						</attribute>
					</comment>
					<params>
						<param name="lnk" comment="File representing the full path to the shortcut file." fulltype="java.io.File" type="File" />
					</params>
				</constructor>
				<method visibility="public" name="getFile" fulltype="java.io.File" type="File" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.File.FileAttributes" type="File.FileAttributes">
		<comment>
			<description>Used to encapsulate extended file attributes. On unix and linux machines, 
  this class is used to parse the output from ls. On windows, this class 
  uses a JNI to return WIN32_FILE_ATTRIBUTE_DATA:

 &lt;pre&gt;
    typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
      DWORD dwFileAttributes;
      FILETIME ftCreationTime;
      FILETIME ftLastAccessTime;
      FILETIME ftLastWriteTime;
      DWORD nFileSizeHigh;
      DWORD nFileSizeLow;
    } WIN32_FILE_ATTRIBUTE_DATA;
 &lt;/pre&gt;</description>
		</comment>
		<fields>
			<field visibility="protected" name="lastUpdate" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="File.FileAttributes">
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</constructor>
			<method visibility="public" name="getSize" fulltype="long" type="long" />
			<method visibility="public" name="getCreationTime" fulltype="java.util.Date" type="Date" />
			<method visibility="public" name="getLastAccessTime" fulltype="java.util.Date" type="Date" />
			<method visibility="public" name="getLastWriteTime" fulltype="java.util.Date" type="Date" />
			<method visibility="public" name="isDirectory" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isHidden" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isReadOnly" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getFlags" fulltype="java.util.HashSet" type="HashSet" />
			<method visibility="public" name="getLink" fulltype="java.io.File" type="File" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.File.LnkParser" type="File.LnkParser">
		<comment>
			<description>Class used to parse a windows lnk files (aka shortcuts). Credit:
   http://stackoverflow.com/a/672775/</description>
		</comment>
		<methods>
			<constructor visibility="public" name="File.LnkParser">
				<params>
					<param name="lnk" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="File.LnkParser">
				<comment>
					<description>Instantiates the class by parsing the Windows shortcut (lnk) file.</description>
					<attribute name="@param">
						<description>lnk File representing the full path to the shortcut file.</description>
					</attribute>
				</comment>
				<params>
					<param name="lnk" comment="File representing the full path to the shortcut file." fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method visibility="public" name="getFile" fulltype="java.io.File" type="File" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Directory" type="Directory">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>Used to represent a directory on a file system. In many ways, this class 
   is an extension of the java.io.File class. However, unlike the java.io.File 
   class, this object provides functions that are relevant and specific to
   directories. For example, this class provides a mechanism to move and copy
   directories - something not offered by the java.io.File class. In addition,
   this class provides a mechanism to retrieve files and folders found in a
   directory AND any subdirectories. This is accomplished via a multi-threaded
   recursive search. Finally, this class provides a powerful tool to monitor
   changes made to the directory (e.g. getEvents).</description>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="PathSeparator" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" visibility="protected" name="isWindows" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="Directory">
				<comment>
					<description>Creates a new instance of Directory using a path to a directory.</description>
				</comment>
				<params>
					<param name="Path" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Directory">
				<comment>
					<description>Creates a new instance of Directory using a java.io.File</description>
				</comment>
				<params>
					<param name="File" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="getRootDirectories" fulltype="javaxt.io.Directory[]" type="Directory">
				<comment>
					<description>Returns an array of Directories that correspond to the available
  filesystem roots. The array will be empty if there are no filesystem
  roots or if the set of roots could not be determined.</description>
				</comment>
			</method>
			<method visibility="public" name="exists" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether a directory exists on the file system</description>
				</comment>
			</method>
			<method visibility="public" name="create" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to create the directory.</description>
				</comment>
			</method>
			<method visibility="public" name="delete" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to delete the directory.</description>
				</comment>
			</method>
			<method visibility="public" name="copyTo" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Used to copy a directory to another directory</description>
				</comment>
				<params>
					<param name="Destination" fulltype="javaxt.io.Directory" type="Directory" />
					<param name="Overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="moveTo" fulltype="void" type="void">
				<comment>
					<description>Used to move a directory from one directory to another.</description>
				</comment>
				<params>
					<param name="Destination" fulltype="javaxt.io.Directory" type="Directory" />
					<param name="Overwrite" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="rename" fulltype="void" type="void">
				<comment>
					<description>Used to rename the directory.</description>
				</comment>
				<params>
					<param name="Name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the directory (excludes path).</description>
				</comment>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the full path to this directory, including the directory name.</description>
				</comment>
			</method>
			<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the directory was last modified. This is
  identical to the getLastModifiedTime() method.</description>
				</comment>
			</method>
			<method visibility="public" name="setDate" fulltype="void" type="void">
				<comment>
					<description>Used to set the timestamp of when the directory was last modified.</description>
				</comment>
				<params>
					<param name="lastModified" fulltype="java.util.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="getSize" fulltype="long" type="long">
				<comment>
					<description>Used to retrieve the size of the directory, in bytes.</description>
				</comment>
			</method>
			<method visibility="public" name="isHidden" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether this Directory is Hidden</description>
				</comment>
			</method>
			<method visibility="public" name="isLink" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the directory is actually a link to another
   file or directory. Returns true for symbolic links and Windows
   junctions.</description>
				</comment>
			</method>
			<method visibility="public" name="getLink" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns the target of a symbolic link or Windows junction</description>
				</comment>
			</method>
			<method visibility="public" name="getLastModifiedTime" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the directory was last modified. This is
  identical to the getDate() method.</description>
				</comment>
			</method>
			<method visibility="public" name="getCreationTime" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the directory was first created. Returns a
  null if the timestamp is not available.</description>
				</comment>
			</method>
			<method visibility="public" name="getLastAccessTime" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns a timestamp of when the directory was last accessed. Returns a
  null if the timestamp is not available.</description>
				</comment>
			</method>
			<method visibility="public" name="getFlags" fulltype="java.util.HashSet" type="HashSet">
				<comment>
					<description>Returns keywords representing directory attributes. Returns an empty 
  HashSet if the attributes are not available.</description>
				</comment>
			</method>
			<method visibility="public" name="getFileAttributes" fulltype="javaxt.io.File.FileAttributes" type="File.FileAttributes">
				<comment>
					<description>Returns file attributes such as when the file was first created and when
  it was last accessed. File attributes are cached for up to one second.
  This provides users the ability to retrieve multiple attributes at once. 
  Without caching, we would have to ping the file system every time we call 
  getLastAccessTime(), getLastAccessTime(), getLastWriteTime(), etc. The
  cached attributes are automatically updated when the file is updated or
  deleted by this class.</description>
				</comment>
			</method>
			<method visibility="public" name="getParentDirectory" fulltype="javaxt.io.Directory" type="Directory">
				<comment>
					<description>Used to retrieve this Directory&apos;s Parent. Returns null if there is no
  parent directory.</description>
				</comment>
			</method>
			<method visibility="public" name="toFile" fulltype="java.io.File" type="File">
				<comment>
					<description>Used to retrieve the java.io.File representation by this object.</description>
				</comment>
			</method>
			<method visibility="public" name="getFiles" fulltype="javaxt.io.File[]" type="File">
				<comment>
					<description>Used to retrieve an array of files found in this directory. Returns an
   empty array if no files are found.</description>
					<attribute name="@param">
						<description>filter A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories.</description>
					</attribute>
				</comment>
				<params>
					<param name="filter" comment="A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getFiles" fulltype="javaxt.io.File[]" type="File">
				<comment>
					<description>Used to retrieve an array of files found in this directory. Returns an
   empty array if no files are found.</description>
				</comment>
			</method>
			<method visibility="public" name="getFiles" fulltype="javaxt.io.File[]" type="File">
				<comment>
					<description>Used to retrieve an array of files found in this directory. Returns an
   empty array if no files are found.</description>
					<attribute name="@param">
						<description>filter A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories.</description>
					</attribute>
					<attribute name="@param">
						<description>RecursiveSearch If true, will perform a multi-threaded, recursive
   directory search to find all the files found in the current directory,
   including any subdirectories. If false, the method will simply return
   files found in the current directory. &lt;br/&gt;

   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method.</description>
					</attribute>
				</comment>
				<params>
					<param name="filter" comment="A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories." fulltype="java.lang.Object" type="Object" />
					<param name="RecursiveSearch" comment="If true, will perform a multi-threaded, recursive
   directory search to find all the files found in the current directory,
   including any subdirectories. If false, the method will simply return
   files found in the current directory. &lt;br/&gt;

   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getFiles" fulltype="javaxt.io.File[]" type="File">
				<comment>
					<description>Used to retrieve an array of files found in this directory.</description>
					<attribute name="@param">
						<description>RecursiveSearch If true, will perform a multi-threaded, recursive
   directory search to find all the files found in the current directory,
   including any subdirectories. If false, the method will simply return
   files found in the current directory. &lt;br/&gt;

   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method.</description>
					</attribute>
				</comment>
				<params>
					<param name="RecursiveSearch" comment="If true, will perform a multi-threaded, recursive
   directory search to find all the files found in the current directory,
   including any subdirectories. If false, the method will simply return
   files found in the current directory. &lt;br/&gt;

   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getSubDirectories" fulltype="javaxt.io.Directory[]" type="Directory">
				<comment>
					<description>Used to retrieve an array of directories found in this directory.</description>
				</comment>
			</method>
			<method visibility="public" name="getSubDirectories" fulltype="javaxt.io.Directory[]" type="Directory">
				<comment>
					<description>Used to retrieve an array of directories found in this directory.</description>
					<attribute name="@param">
						<description>RecursiveSearch If true, will perform a multi-threaded, recursive
   directory search to find all the directories found in the current
   directory, including any subdirectories. If false, the method will simply
   return directories found in the current directory. &lt;br/&gt;
 
   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method.</description>
					</attribute>
				</comment>
				<params>
					<param name="RecursiveSearch" comment="If true, will perform a multi-threaded, recursive
   directory search to find all the directories found in the current
   directory, including any subdirectories. If false, the method will simply
   return directories found in the current directory. &lt;br/&gt;
 
   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getChildren" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to retrieve an array of both files and folders found in this 
   directory.</description>
				</comment>
			</method>
			<method visibility="public" name="getChildren" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to retrieve an array of both files and folders found in this
   directory.</description>
				</comment>
				<params>
					<param name="RecursiveSearch" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getChildren" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to retrieve an list of files and folders found in this directory.</description>
					<attribute name="@param">
						<description>RecursiveSearch If true, will include files found in the
   subdirectories.</description>
					</attribute>
					<attribute name="@param">
						<description>filter A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories.</description>
					</attribute>
				</comment>
				<params>
					<param name="RecursiveSearch" comment="If true, will include files found in the
   subdirectories." fulltype="boolean" type="boolean" />
					<param name="filter" comment="A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getChildren" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to retrieve an list of files and folders found in this directory.</description>
					<attribute name="@param">
						<description>RecursiveSearch If true, will perform a multi-threaded, recursive
   directory search to find all the files and folders found in the current
   directory, including any subdirectories. If false, the method will simply
   return items found in the current directory. &lt;br/&gt;

   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method.</description>
					</attribute>
					<attribute name="@param">
						<description>filter A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories.</description>
					</attribute>
					<attribute name="@param">
						<description>wait Used to indicate whether to wait for the list to be fully
   populated before returning the response. When traversing very a large
   set of files, it maybe a good idea to process the files as they get added
   to the list. In this case you should set this parameter to false. If this
   parameter is set to false, a null entry will be added to the end of the
   list to indicate that the directory search is complete.

   Example: &lt;pre&gt;
    boolean wait = false;
    java.util.List files = directory.getChildren(true, null, wait);
    if (wait){
        for (int i=0; i &amp;lt; files.size(); i++){
            System.out.println(files.get(i));
        }
    }
    else{
        Object obj;
        while (true){
            synchronized (files) {
                while (files.isEmpty()) {
                  try {
                      files.wait();
                  }
                  catch (InterruptedException e) {
                      break;
                  }
                }
                obj = files.remove(0);
                files.notifyAll();
            }

            if (obj==null){
                break;
            }
            else{
                System.out.println(obj);
            }
        }
    }&lt;/pre&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="RecursiveSearch" comment="If true, will perform a multi-threaded, recursive
   directory search to find all the files and folders found in the current
   directory, including any subdirectories. If false, the method will simply
   return items found in the current directory. &lt;br/&gt;

   Note that if the thread is interrupted for whatever reason during a
   recursive search, the search will stop immediately. Consequently, the
   returned array may be incomplete. You can check the interrupted status
   with the Thread.isInterrupted() method. Alternatively, you can read and
   clear the interrupted status in a single operation using the
   Thread.interrupted() method." fulltype="boolean" type="boolean" />
					<param name="filter" comment="A file filter. You can pass in a java.io.FileFilter, a
   String (e.g. &quot;*.txt&quot;), or an array of Strings (e.g. String[]{&quot;*.txt&quot;, &quot;*.doc&quot;}).
   Wildcard filters are supported. Note that the filter is only applied to
   files, not directories." fulltype="java.lang.Object" type="Object" />
					<param name="wait" comment="Used to indicate whether to wait for the list to be fully
   populated before returning the response. When traversing very a large
   set of files, it maybe a good idea to process the files as they get added
   to the list. In this case you should set this parameter to false. If this
   parameter is set to false, a null entry will be added to the end of the
   list to indicate that the directory search is complete.

   Example: &lt;pre&gt;
    boolean wait = false;
    java.util.List files = directory.getChildren(true, null, wait);
    if (wait){
        for (int i=0; i &amp;lt; files.size(); i++){
            System.out.println(files.get(i));
        }
    }
    else{
        Object obj;
        while (true){
            synchronized (files) {
                while (files.isEmpty()) {
                  try {
                      files.wait();
                  }
                  catch (InterruptedException e) {
                      break;
                  }
                }
                obj = files.remove(0);
                files.notifyAll();
            }

            if (obj==null){
                break;
            }
            else{
                System.out.println(obj);
            }
        }
    }&lt;/pre&gt;" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="protected" name="listFiles" fulltype="java.lang.Object[]" type="Object">
				<comment>
					<description>Used to return a list of files found in this directory.</description>
				</comment>
			</method>
			<method visibility="public" name="useCache" fulltype="void" type="void">
				<comment>
					<description>Used to specify whether to cache results from a directory search.</description>
					<attribute name="@deprecated">
						<description>This method is no longer reliable and should not be used.</description>
					</attribute>
				</comment>
				<params>
					<param name="useCache" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method visibility="public" name="compareTo" fulltype="int" type="int">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getEvents" fulltype="java.util.List" type="List">
				<comment>
					<description>Used to start monitoring changes made to the directory. Changes include 
  creating, modifying or deleting files/folders found in this directory.
  Returns a list of Directory.Event(s). Clients can wait for new events
  using the wait() method. Recommend removing events from the list whenever
  !events.isEmpty().
 
  Example:&lt;pre&gt;
    java.util.List events = directory.getEvents();
    while (true){

        Object obj;
        synchronized (events) {
            while (events.isEmpty()) {
              try {
                  events.wait();
              }
              catch (InterruptedException e) {
              }
            }

            obj = events.remove(0);
        }
        if (obj!=null){

            javaxt.io.Directory.Event event = (javaxt.io.Directory.Event) obj;
            System.out.println(event.toString());

          //Compare files before/after the event
            if (event.getEventID()==event.RENAME){
                System.out.println(
                    event.getOriginalFile().getName() + &quot; vs &quot; +
                    event.getFile().getName()
                );
            }
        }

    }&lt;/pre&gt;</description>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
			<method visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>Used to stop any worker threads that may be running (recursive search or
  event monitor).</description>
				</comment>
			</method>
			<method visibility="protected" name="finalize" fulltype="void" type="void">
				<comment>
					<description>Method called by Java garbage collector to dispose operating system 
  resource.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.Throwable" type="Throwable" />
				</exceptions>
			</method>
			<method visibility="protected" name="addEvent" fulltype="void" type="void">
				<comment>
					<description>Used to add a new event to the list of events. This method is called 
  from the FileSystemWatcher Class via the run() method.</description>
				</comment>
				<params>
					<param name="event" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="addEvent" fulltype="void" type="void">
				<comment>
					<description>Used to add a new event to the list of events. This method is called 
  from the FileSystemWatcher Class via the EventMonitor.</description>
				</comment>
				<params>
					<param name="action" fulltype="java.lang.String" type="String" />
					<param name="file" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Directory.Event" type="Directory.Event">
			<comment>
				<description>Used to encapsulate a single event on the file system.</description>
			</comment>
			<fields>
				<field final="true" static="true" const="0" visibility="public" name="DELETE" constexpr="0" fulltype="int" type="int" />
				<field final="true" static="true" const="1" visibility="public" name="CREATE" constexpr="1" fulltype="int" type="int" />
				<field final="true" static="true" const="2" visibility="public" name="RENAME" constexpr="2" fulltype="int" type="int" />
				<field final="true" static="true" const="3" visibility="public" name="MODIFY" constexpr="3" fulltype="int" type="int" />
			</fields>
			<methods>
				<method visibility="public" name="getAction" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns a decription of the event (created, modified, deleted, etc.)</description>
					</comment>
				</method>
				<method visibility="public" name="getFile" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns the file or directory that was created, modified, or deleted.</description>
					</comment>
				</method>
				<method visibility="public" name="getOriginalFile" fulltype="java.lang.String" type="String" />
				<method final="true" visibility="public" name="getEventID" fulltype="int" type="int" />
				<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date">
					<comment>
						<description>Returns the date/time stamp when the event occured.</description>
					</comment>
				</method>
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns a string representation of this event.</description>
					</comment>
				</method>
				<method visibility="public" name="equals" fulltype="boolean" type="boolean">
					<params>
						<param name="obj" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.io" superclassfulltype="java.lang.Object" fulltype="javaxt.io.Directory.Event" type="Directory.Event">
		<comment>
			<description>Used to encapsulate a single event on the file system.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="DELETE" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="public" name="CREATE" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="public" name="RENAME" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="public" name="MODIFY" constexpr="3" fulltype="int" type="int" />
		</fields>
		<methods>
			<method visibility="public" name="getAction" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a decription of the event (created, modified, deleted, etc.)</description>
				</comment>
			</method>
			<method visibility="public" name="getFile" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the file or directory that was created, modified, or deleted.</description>
				</comment>
			</method>
			<method visibility="public" name="getOriginalFile" fulltype="java.lang.String" type="String" />
			<method final="true" visibility="public" name="getEventID" fulltype="int" type="int" />
			<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns the date/time stamp when the event occured.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this event.</description>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Value" visibility="public" package="javaxt.sql" superclassfulltype="javaxt.utils.Value" fulltype="javaxt.sql.Value" type="Value">
		<comment>
			<description>Used to represent a value for a given field in the database. The value can
   be converted into a number of Java primatives (strings, integers, doubles,
   booleans, etc).</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="Value">
				<comment>
					<description>Creates a new instance of Value.</description>
				</comment>
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="toTimeStamp" fulltype="java.sql.Timestamp" type="Timestamp" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Table" type="Table">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>Used to represent a table in the database.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="Table">
				<comment>
					<description>Used to instantiate this class.</description>
				</comment>
				<params>
					<param name="rs" fulltype="java.sql.ResultSet" type="ResultSet" />
					<param name="dbmd" fulltype="java.sql.DatabaseMetaData" type="DatabaseMetaData" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this table.</description>
				</comment>
			</method>
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getSchema" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getCatalog" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getColumns" fulltype="javaxt.sql.Column[]" type="Column">
				<comment>
					<description>Returns a list of columns in this table. Returns null if no columns are
  found.</description>
				</comment>
			</method>
			<method visibility="public" name="getPrimaryKeys" fulltype="javaxt.sql.Key[]" type="Key">
				<comment>
					<description>Returns a list of primary keys in this table. Usually there is only
  one primary key per table, but some vendors do support multiple keys per 
  table.</description>
				</comment>
			</method>
			<method visibility="public" name="getForeignKeys" fulltype="javaxt.sql.Key[]" type="Key">
				<comment>
					<description>Returns a list of foreign keys found in this table.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the table name.</description>
				</comment>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method visibility="public" name="compareTo" fulltype="int" type="int">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Recordset" type="Recordset">
		<comment>
			<description>Used to query and update records in a database.</description>
		</comment>
		<fields>
			<field visibility="public" name="State" fulltype="int" type="int">
				<comment>
					<description>Returns a value that describes if the Recordset object is open, closed, 
 connecting, executing or retrieving data</description>
				</comment>
			</field>
			<field visibility="public" name="EOF" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the current record position is after the last record, 
 otherwise false.</description>
				</comment>
			</field>
			<field visibility="public" name="MaxRecords" fulltype="int" type="int">
				<comment>
					<description>Sets or returns the maximum number of records to return to a Recordset 
 object from a query.</description>
				</comment>
			</field>
			<field visibility="public" name="RecordCount" fulltype="int" type="int">
				<comment>
					<description>Returns the number of records in a Recordset object. This property is a 
 bit unreliable. Recommend using the getRecordCount() method instead.</description>
				</comment>
			</field>
			<field visibility="public" name="QueryResponseTime" fulltype="long" type="long">
				<comment>
					<description>Returns the time it took to execute a given query. Units are in 
 milliseconds</description>
				</comment>
			</field>
			<field visibility="public" name="EllapsedTime" fulltype="long" type="long">
				<comment>
					<description>Returns the total elapsed time between open and close operations. Units 
 are in milliseconds</description>
				</comment>
			</field>
			<field visibility="public" name="MetadataQueryTime" fulltype="long" type="long">
				<comment>
					<description>Returns the elapsed time it took to retrieve additional metadata not 
 correctly supported by the jdbc driver. Units are in milliseconds.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Recordset">
				<comment>
					<description>Creates a new instance of this class.</description>
				</comment>
			</constructor>
			<method visibility="public" name="isOpen" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the recordset is open. This method is only supported on
  Java 1.6 or higher. Otherwise, the method will return false.</description>
				</comment>
			</method>
			<method visibility="public" name="isReadOnly" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if records are read-only.</description>
				</comment>
			</method>
			<method visibility="public" name="open" fulltype="java.sql.ResultSet" type="ResultSet">
				<comment>
					<description>Used to execute a query and access records in the database. Records
  fetched using this method cannot be updated or deleted and new records
  cannot be inserted into the database.</description>
					<attribute name="@param">
						<description>sql SQL Query. Example: &quot;SELECT * FROM EMPLOYEE&quot;</description>
					</attribute>
					<attribute name="@param">
						<description>conn An active connection to the database.</description>
					</attribute>
				</comment>
				<params>
					<param name="sql" comment="SQL Query. Example: &quot;SELECT * FROM EMPLOYEE&quot;" fulltype="java.lang.String" type="String" />
					<param name="conn" comment="An active connection to the database." fulltype="javaxt.sql.Connection" type="Connection" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="open" fulltype="java.sql.ResultSet" type="ResultSet">
				<comment>
					<description>Used to execute a query and access records in the database.</description>
					<attribute name="@param">
						<description>sqlString SQL Query. Example: &quot;SELECT * FROM EMPLOYEE&quot;</description>
					</attribute>
					<attribute name="@param">
						<description>Connection An active connection to the database.</description>
					</attribute>
					<attribute name="@param">
						<description>ReadOnly Set whether the records are read-only. If true, records
  fetched using this method cannot be updated or deleted and new records
  cannot be inserted into the database. If false, records can be updated
  or deleted and new records can be inserted into the database.</description>
					</attribute>
				</comment>
				<params>
					<param name="sqlString" comment="SQL Query. Example: &quot;SELECT * FROM EMPLOYEE&quot;" fulltype="java.lang.String" type="String" />
					<param name="Connection" comment="An active connection to the database." fulltype="javaxt.sql.Connection" type="Connection" />
					<param name="ReadOnly" comment="Set whether the records are read-only. If true, records
  fetched using this method cannot be updated or deleted and new records
  cannot be inserted into the database. If false, records can be updated
  or deleted and new records can be inserted into the database." fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="close" fulltype="void" type="void">
				<comment>
					<description>Closes the Recordset freeing up database and jdbc resources.</description>
				</comment>
			</method>
			<method visibility="public" name="getDatabase" fulltype="javaxt.sql.Database" type="Database">
				<comment>
					<description>Returns connection information to the database.</description>
				</comment>
			</method>
			<method visibility="public" name="setFetchSize" fulltype="void" type="void">
				<comment>
					<description>This method changes the block fetch size for server cursors. This may
  help avoid out of memory exceptions when retrieving a large number of
  records from the database. Set this method BEFORE opening the recordset.</description>
				</comment>
				<params>
					<param name="fetchSize" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getConnection" fulltype="javaxt.sql.Connection" type="Connection">
				<comment>
					<description>Returns the JDBC Connection used to create/open the recordset.</description>
				</comment>
			</method>
			<method visibility="public" name="commit" fulltype="void" type="void">
				<comment>
					<description>Used to explicitely commit an sql statement. May be useful for bulk
  update and update statements, depending on the underlying DBMS.</description>
				</comment>
			</method>
			<method visibility="public" name="addNew" fulltype="void" type="void">
				<comment>
					<description>Used to prepare the driver to insert new records to the database. Used
   in conjunction with the update method.</description>
				</comment>
			</method>
			<method visibility="public" name="update" fulltype="void" type="void">
				<comment>
					<description>Used to add or update a record in the recordset.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="getGeneratedKey" fulltype="javaxt.sql.Value" type="Value">
				<comment>
					<description>Returns an auto-generated key created after inserting a record in the
  database. If this Statement object did not generate any keys, an empty
  Value object is returned.</description>
				</comment>
			</method>
			<method visibility="public" name="getFields" fulltype="javaxt.sql.Field[]" type="Field">
				<comment>
					<description>Used to retrieve the an array of fields in the current record.</description>
				</comment>
			</method>
			<method visibility="public" name="getField" fulltype="javaxt.sql.Field" type="Field">
				<comment>
					<description>Returns a specific field in the array of fields. Returns null if the
  field name is not found.</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getField" fulltype="javaxt.sql.Field" type="Field">
				<comment>
					<description>Returns a specific field in the array of fields. Returns null if the
  index is out of range.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getValue" fulltype="javaxt.sql.Value" type="Value">
				<comment>
					<description>Returns the Value associated with a given field. Note the if the field
  doesn&apos;t exist in the result set, the method will return still return a
  Value. You can use the isNull() method on the Value to determine whether
  the value is null.</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getValue" fulltype="javaxt.sql.Value" type="Value">
				<comment>
					<description>Returns the Value associated with a given field. Note the if the field
  doesn&apos;t exist in the result set, the method will return still return a
  Value. You can use the isNull() method on the Value to determine whether
  the value is null.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isDirty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if any of the fields have been modified. You can find which
  field has been modified using the Field.isDirty() method. Example:
   &lt;pre&gt;
    if (rs.isDirty()){
        for (javaxt.sql.Field field : rs.getFields()){
            if (field.isDirty()){
                String val = field.getValue().toString();
                System.out.println(field.getName() + &quot;: &quot; + val);
            }
        }
    }
   &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="javaxt.sql.Value" type="Value" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set Value with an Object value.</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set Value with a Boolean value</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set Value with a Long value</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set Value with an Integer value</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set Value with a Double value</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Set Value with a Short value</description>
				</comment>
				<params>
					<param name="FieldName" fulltype="java.lang.String" type="String" />
					<param name="FieldValue" fulltype="short" type="short" />
				</params>
			</method>
			<method visibility="public" name="hasNext" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the recordset has more records.</description>
				</comment>
			</method>
			<method visibility="public" name="moveNext" fulltype="boolean" type="boolean">
				<comment>
					<description>Move the cursor to the next record in the recordset.</description>
				</comment>
			</method>
			<method visibility="public" name="move" fulltype="void" type="void">
				<comment>
					<description>Moves the cursor to n-number of rows in the database. Typically this 
   method is called before iterating through a recordset.</description>
				</comment>
				<params>
					<param name="numRecords" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getRecordCount" fulltype="int" type="int">
				<comment>
					<description>Used to retrieve the total record count. Note that this method may be
  slow.</description>
				</comment>
			</method>
			<method visibility="protected" name="finalize" fulltype="void" type="void">
				<comment>
					<description>Method *should* be called by Java garbage collector once this class is
  disposed.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.Throwable" type="Throwable" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser" type="Parser">
		<comment>
			<description>Used to parse and modify SQL Select Statements (&quot;Select * from MyTable&quot;).
   Other SQL commands are not supported (insert, update, create, etc.). &lt;br&gt;

   Note that this implementation is incomplete and needs a lot more testing.
   For example, the parser does not yet handle unions, subselects, and
   having clauses. Other potential problems include arithmetic operators in
   the where clause (&quot;where posting_time + 60 &gt; sysdate&quot;).</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parser">
				<params>
					<param name="sql" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getSelectString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getFromString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getWhereString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getOrderByString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getGroupByString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getHavingString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setWhere" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to update the where clause in the SQL String. The entire where
  clause will be replaced with the given string. The input select clause
  is accepted &quot;AS IS&quot;. Returns an updated SQL statement.</description>
				</comment>
				<params>
					<param name="whereClause" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns an sql String, including any updates</description>
				</comment>
			</method>
			<method visibility="public" name="setSelect" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to update the select clause. The input select clause is accepted
   &quot;AS IS&quot;. Returns an updated SQL statement.</description>
				</comment>
				<params>
					<param name="selectClause" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getSelectStatements" fulltype="javaxt.sql.Parser.SelectStatement[]" type="Parser.SelectStatement">
				<comment>
					<description>Used to break down the select clause into individual elements. For 
  example, &quot;Select FirstName, LastName from Contacts&quot; would return an 
  array with 2 entries: &quot;FirstName&quot; and &quot;LastName&quot;.</description>
				</comment>
			</method>
			<method visibility="public" name="getTables" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns an array of Tables Found in the SQL String</description>
				</comment>
			</method>
			<method visibility="public" name="getWhereStatements" fulltype="javaxt.sql.Parser.WhereStatement[]" type="Parser.WhereStatement">
				<comment>
					<description>Used to retrieve a list of where statements found in the where clause.
  Returns an empty array if no where statements are found.</description>
				</comment>
			</method>
			<method visibility="public" name="getOrderByStatements" fulltype="javaxt.sql.Parser.OrderByStatement[]" type="Parser.OrderByStatement">
				<comment>
					<description>Used to break down the &quot;ORDER BY&quot; clause into individual statements.</description>
				</comment>
			</method>
			<method visibility="public" name="getGroupByStatements" fulltype="javaxt.sql.Parser.GroupByStatement[]" type="Parser.GroupByStatement">
				<comment>
					<description>Used to break down the &quot;GROUP BY&quot; clause into individual statements.</description>
				</comment>
			</method>
			<method visibility="protected" name="getExposedDataElements" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Used to retrieve a list of database elements (tables, columns, etc.) 
   found in the sql string that are not wrapped in quotes.</description>
				</comment>
			</method>
			<method visibility="protected" name="addQuotes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to identify tables and columns in the SQL and wrap them in quotes.
  Note that this method is fairly brittle and needs a lot more work.</description>
				</comment>
			</method>
			<method visibility="public" name="debug" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.SelectStatement" type="Parser.SelectStatement">
			<comment>
				<description>Used to represent an individual select statement found in the select 
  clause.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Parser.SelectStatement">
					<params>
						<param name="statement" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getAlias" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.FromStatement" type="Parser.FromStatement">
			<comment>
				<description>Used to represent the &quot;FROM&quot; clause.</description>
			</comment>
			<methods>
				<method visibility="public" name="addTable" fulltype="void" type="void">
					<params>
						<param name="tableName" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="addColumn" fulltype="void" type="void">
					<params>
						<param name="columnName" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="public" name="getExposedElements" fulltype="java.util.HashSet" type="HashSet" />
				<method visibility="public" name="getTables" fulltype="java.lang.String[]" type="String" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.WhereStatement" type="Parser.WhereStatement">
			<comment>
				<description>Used to represent an individual where condition found in the &quot;WHERE&quot;
  clause. Note that this class is also used to parse join logic found
  in the &quot;FROM&quot; clause.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Parser.WhereStatement">
					<params>
						<param name="statement" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<constructor visibility="public" name="Parser.WhereStatement">
					<params>
						<param name="statement" fulltype="java.lang.String" type="String" />
						<param name="sqlOperators" fulltype="java.lang.String[]" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getLeftOperand" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getRightOperand" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="getOperator" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.OrderByStatement" type="Parser.OrderByStatement">
			<comment>
				<description>Simple class used to represent a single statement in an &quot;ORDER BY&quot;
  clause.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Parser.OrderByStatement">
					<params>
						<param name="orderBy" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="isDescending" fulltype="boolean" type="boolean" />
				<method visibility="public" name="isAscending" fulltype="boolean" type="boolean" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.GroupByStatement" type="Parser.GroupByStatement">
			<comment>
				<description>Simple class used to represent a single statement in a &quot;GROUP BY&quot; clause.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="Parser.GroupByStatement">
					<params>
						<param name="groupBy" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String" />
				<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.SelectStatement" type="Parser.SelectStatement">
		<comment>
			<description>Used to represent an individual select statement found in the select 
  clause.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parser.SelectStatement">
				<params>
					<param name="statement" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getAlias" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.FromStatement" type="Parser.FromStatement">
		<comment>
			<description>Used to represent the &quot;FROM&quot; clause.</description>
		</comment>
		<methods>
			<method visibility="public" name="addTable" fulltype="void" type="void">
				<params>
					<param name="tableName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addColumn" fulltype="void" type="void">
				<params>
					<param name="columnName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getExposedElements" fulltype="java.util.HashSet" type="HashSet" />
			<method visibility="public" name="getTables" fulltype="java.lang.String[]" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.WhereStatement" type="Parser.WhereStatement">
		<comment>
			<description>Used to represent an individual where condition found in the &quot;WHERE&quot;
  clause. Note that this class is also used to parse join logic found
  in the &quot;FROM&quot; clause.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parser.WhereStatement">
				<params>
					<param name="statement" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Parser.WhereStatement">
				<params>
					<param name="statement" fulltype="java.lang.String" type="String" />
					<param name="sqlOperators" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getLeftOperand" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getRightOperand" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getOperator" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.OrderByStatement" type="Parser.OrderByStatement">
		<comment>
			<description>Simple class used to represent a single statement in an &quot;ORDER BY&quot;
  clause.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parser.OrderByStatement">
				<params>
					<param name="orderBy" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="isDescending" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isAscending" fulltype="boolean" type="boolean" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Parser.GroupByStatement" type="Parser.GroupByStatement">
		<comment>
			<description>Simple class used to represent a single statement in a &quot;GROUP BY&quot; clause.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parser.GroupByStatement">
				<params>
					<param name="groupBy" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getColumnName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Key" type="Key">
		<comment>
			<description>Used to represent a unique primary key or a foreign key in a table.</description>
		</comment>
		<fields>
			<field visibility="protected" name="Name" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="Table" fulltype="javaxt.sql.Table" type="Table" />
			<field visibility="protected" name="Column" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="Key" />
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getTable" fulltype="javaxt.sql.Table" type="Table" />
			<method visibility="public" name="getColumn" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Field" type="Field">
		<comment>
			<description>Used to represent a field in a Recordset.</description>
		</comment>
		<fields>
			<field visibility="protected" name="Type" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="Value" fulltype="javaxt.sql.Value" type="Value" />
			<field visibility="protected" name="Class" fulltype="java.lang.String" type="String" />
			<field visibility="protected" name="RequiresUpdate" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="protected" name="Field">
				<comment>
					<description>Creates a new instance of this class.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="rsmd" fulltype="java.sql.ResultSetMetaData" type="ResultSetMetaData" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the column associated with this field. Returns null
  if the column name is unknown.</description>
				</comment>
			</method>
			<method visibility="public" name="getValue" fulltype="javaxt.sql.Value" type="Value">
				<comment>
					<description>Returns the value for this field.</description>
				</comment>
			</method>
			<method visibility="public" name="getTable" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the table in which this field is found. Returns null
  if the table name is unknown.</description>
				</comment>
			</method>
			<method visibility="protected" name="setTableName" fulltype="void" type="void">
				<params>
					<param name="tableName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getSchema" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the schema to which this field belongs. Schemas are
  used to group objects in the database and are often used for access
  control. Returns null if the schema name is unknown.</description>
				</comment>
			</method>
			<method visibility="protected" name="setSchemaName" fulltype="void" type="void">
				<params>
					<param name="schema" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isDirty" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the value for this field has changed.</description>
				</comment>
			</method>
			<method visibility="protected" name="clear" fulltype="void" type="void">
				<comment>
					<description>Used to delete all the attributes of this field.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Driver" type="Driver">
		<comment>
			<description>Used to encapsulate basic driver information used to create a database
   connection.</description>
		</comment>
		<fields>
			<field static="true" visibility="public" name="SQLServer" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>Microsoft SQL Server database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="DB2" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>IBM DB2 database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="Sybase" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>Sybase ASE database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="PostgreSQL" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>PostgreSQL database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="Derby" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>Derby database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="SQLite" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>SQLite database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="Access" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>Microsoft Access database driver.</description>
				</comment>
			</field>
			<field static="true" visibility="public" name="FrontBase" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Informix" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Cache" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Mimer" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="MySQL" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Teradata" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Pervasive" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Pointbase" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Daffodil" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="JTDS" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Oracle" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="Firebird" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="H2" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="HyperSQL" fulltype="javaxt.sql.Driver" type="Driver" />
			<field static="true" visibility="public" name="ODBC" fulltype="javaxt.sql.Driver" type="Driver" />
		</fields>
		<methods>
			<constructor visibility="public" name="Driver">
				<comment>
					<description>Creates a new instance of this class. Here are some common examples:
   &lt;pre&gt;
    new Driver(&quot;SQLServer&quot;,&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;,&quot;jdbc:sqlserver&quot;);
    new Driver(&quot;DB2&quot;,&quot;com.ibm.db2.jcc.DB2Driver&quot;,&quot;jdbc:db2&quot;);
    new Driver(&quot;Sybase&quot;,&quot;com.sybase.jdbc3.jdbc.SybDriver&quot;,&quot;jdbc:sybase&quot;);
    new Driver(&quot;PostgreSQL&quot;,&quot;org.postgresql.Driver&quot;,&quot;jdbc:postgresql&quot;);
    new Driver(&quot;Derby&quot;,&quot;org.apache.derby.jdbc.EmbeddedDriver&quot;,&quot;jdbc:derby&quot;);
   &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>vendor Name the database/vendor. This keyword used extensively in
  the javaxt.sql.Recordset class to accomodate inconsistant JDBC implementations
  between database vendors. As such, please use the names provided in the
  examples above when connecting to SQL Server, DB2, Sybase, and PostgreSQL.
  Other databases have not been tested and do not require reserved keywords.</description>
					</attribute>
					<attribute name="@param">
						<description>driver Class name used to create a java.sql.Driver.</description>
					</attribute>
					<attribute name="@param">
						<description>protocol Protocol used in the jdbc connection string.</description>
					</attribute>
				</comment>
				<params>
					<param name="vendor" comment="Name the database/vendor. This keyword used extensively in
  the javaxt.sql.Recordset class to accomodate inconsistant JDBC implementations
  between database vendors. As such, please use the names provided in the
  examples above when connecting to SQL Server, DB2, Sybase, and PostgreSQL.
  Other databases have not been tested and do not require reserved keywords." fulltype="java.lang.String" type="String" />
					<param name="driver" comment="Class name used to create a java.sql.Driver." fulltype="java.lang.String" type="String" />
					<param name="protocol" comment="Protocol used in the jdbc connection string." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Driver">
				<comment>
					<description>Creates a new instance of this class with a given java.sql.Driver.</description>
				</comment>
				<params>
					<param name="driver" fulltype="java.sql.Driver" type="Driver" />
				</params>
			</constructor>
			<method visibility="public" name="getProtocol" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the url protocol used in the jdbc connection string (e.g.
  jdbc:sqlserver, jdbc:db2, jdbc:sybase, jdbc:postgresql, jdbc:derby).</description>
				</comment>
			</method>
			<method visibility="public" name="getClassName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the class name used to create a new java.sql.Driver (e.g.
  com.microsoft.sqlserver.jdbc.SQLServerDriver).</description>
				</comment>
			</method>
			<method visibility="public" name="getVendor" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name the database/vendor (e.g. SQLServer, DB2, Sybase, etc.)</description>
				</comment>
			</method>
			<method visibility="public" name="load" fulltype="java.sql.Driver" type="Driver">
				<comment>
					<description>Used to create a new instance of a java.sql.Driver that corresponds to
  the driver class specified in the constructor.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to compare drivers by class, protocol, and vendor.</description>
					<attribute name="@param">
						<description>obj Accepts either a javaxt.sql.Driver or a String representing
  the driver class, protocol, or vendor.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="Accepts either a javaxt.sql.Driver or a String representing
  the driver class, protocol, or vendor." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="findDriver" fulltype="javaxt.sql.Driver" type="Driver">
				<comment>
					<description>Used to try to find a driver that corresponds to the vendor name, class
  name, or protocol.</description>
				</comment>
				<params>
					<param name="driverName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name the database/vendor. Same as getVendor()</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Database" type="Database">
		<comment>
			<description>Object used to represent all of the information required to connect to a
   database.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Database">
				<comment>
					<description>Creates a new instance of this class. Note that you will need to set the
  name, host, port, username, password, and driver in order to create a
  connection to the database.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="Database">
				<comment>
					<description>Creates a new instance of this class.</description>
					<attribute name="@param">
						<description>name Name of the catalog used to store tables, views, etc.</description>
					</attribute>
					<attribute name="@param">
						<description>host Server name or IP address.</description>
					</attribute>
					<attribute name="@param">
						<description>port Port number used to establish connections to the database.</description>
					</attribute>
					<attribute name="@param">
						<description>username Username used to log into the database</description>
					</attribute>
					<attribute name="@param">
						<description>password Password used to log into the database</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="Name of the catalog used to store tables, views, etc." fulltype="java.lang.String" type="String" />
					<param name="host" comment="Server name or IP address." fulltype="java.lang.String" type="String" />
					<param name="port" comment="Port number used to establish connections to the database." fulltype="int" type="int" />
					<param name="username" comment="Username used to log into the database" fulltype="java.lang.String" type="String" />
					<param name="password" comment="Password used to log into the database" fulltype="java.lang.String" type="String" />
					<param name="driver" fulltype="javaxt.sql.Driver" type="Driver" />
				</params>
			</constructor>
			<constructor visibility="public" name="Database">
				<comment>
					<description>Creates a new instance of Database using a jdbc connection.</description>
				</comment>
				<params>
					<param name="conn" fulltype="java.sql.Connection" type="Connection" />
				</params>
			</constructor>
			<constructor visibility="public" name="Database">
				<comment>
					<description>Creates a new instance of a Database using a jdbc connection string.
  Username and password may be appended to the end of the connection string
  in the property list.</description>
					<attribute name="@param">
						<description>connStr A jdbc connection string/url. All connection URLs
  have the following form:
  &lt;pre&gt; jdbc:[dbVendor]://[dbName][propertyList] &lt;/pre&gt;

  Examples:
  &lt;p&gt;Derby:&lt;/p&gt;
  &lt;pre&gt; jdbc:derby://temp/my.db;user=admin;password=mypassword &lt;/pre&gt;
  &lt;p&gt;SQL Server:&lt;/p&gt;
  &lt;pre&gt; jdbc:sqlserver://192.168.0.80;databaseName=master;user=admin;password=mypassword &lt;/pre&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="connStr" comment="A jdbc connection string/url. All connection URLs
  have the following form:
  &lt;pre&gt; jdbc:[dbVendor]://[dbName][propertyList] &lt;/pre&gt;

  Examples:
  &lt;p&gt;Derby:&lt;/p&gt;
  &lt;pre&gt; jdbc:derby://temp/my.db;user=admin;password=mypassword &lt;/pre&gt;
  &lt;p&gt;SQL Server:&lt;/p&gt;
  &lt;pre&gt; jdbc:sqlserver://192.168.0.80;databaseName=master;user=admin;password=mypassword &lt;/pre&gt;" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="setName" fulltype="void" type="void">
				<comment>
					<description>Sets the name of the catalog used to store tables, views, etc.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Gets the name of the catalog used to store tables, views, etc.</description>
				</comment>
			</method>
			<method visibility="public" name="setHost" fulltype="void" type="void">
				<comment>
					<description>Used to set the path to the database (server name and port).</description>
				</comment>
				<params>
					<param name="host" fulltype="java.lang.String" type="String" />
					<param name="port" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setHost" fulltype="void" type="void">
				<comment>
					<description>Used to set the path to the database.</description>
					<attribute name="@param">
						<description>host Server name/port (e.g. localhost:9080) or a path to a file
  (e.g. /temp/firebird.db)</description>
					</attribute>
				</comment>
				<params>
					<param name="host" comment="Server name/port (e.g. localhost:9080) or a path to a file
  (e.g. /temp/firebird.db)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getHost" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name or IP address of the server or a physical path to the 
  database file.</description>
				</comment>
			</method>
			<method visibility="public" name="setPort" fulltype="void" type="void">
				<params>
					<param name="port" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getPort" fulltype="int" type="int" />
			<method visibility="public" name="setDriver" fulltype="void" type="void">
				<params>
					<param name="driver" fulltype="javaxt.sql.Driver" type="Driver" />
				</params>
			</method>
			<method visibility="public" name="setDriver" fulltype="void" type="void">
				<comment>
					<description>Used to find a driver that corresponds to a given vendor name, class
  name, or protocol.</description>
				</comment>
				<params>
					<param name="driver" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setDriver" fulltype="void" type="void">
				<params>
					<param name="driver" fulltype="java.sql.Driver" type="Driver" />
				</params>
			</method>
			<method visibility="public" name="setDriver" fulltype="void" type="void">
				<params>
					<param name="driver" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getDriver" fulltype="javaxt.sql.Driver" type="Driver" />
			<method visibility="public" name="setUserName" fulltype="void" type="void">
				<params>
					<param name="username" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getUserName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setPassword" fulltype="void" type="void">
				<params>
					<param name="password" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getPassword" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setProperties" fulltype="void" type="void">
				<params>
					<param name="properties" fulltype="java.util.Properties" type="Properties" />
				</params>
			</method>
			<method visibility="public" name="getProperties" fulltype="java.util.Properties" type="Properties" />
			<method visibility="public" name="getConnectionString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a JDBC connection string used to connect to the database.
  Username and password are appended to the end of the url.</description>
				</comment>
			</method>
			<method visibility="protected" name="getURL" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to construct a JDBC connection string</description>
				</comment>
			</method>
			<method visibility="public" name="getConnection" fulltype="javaxt.sql.Connection" type="Connection">
				<comment>
					<description>Used to open a connection to the database. Note the the connection will
  need to be closed afterwards.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="getConnectionPoolDataSource" fulltype="javax.sql.ConnectionPoolDataSource" type="ConnectionPoolDataSource">
				<comment>
					<description>Used to instantiate a ConnectionPoolDataSource for the database. The
   ConnectionPoolDataSource is typically used to create a JDBC Connection
   Pool.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getTables" fulltype="javaxt.sql.Table[]" type="Table">
				<comment>
					<description>Used to retrieve an array of tables found in this database.</description>
				</comment>
				<params>
					<param name="conn" fulltype="javaxt.sql.Connection" type="Connection" />
				</params>
			</method>
			<method static="true" visibility="public" name="getCatalogs" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Used to retrieve a list of available databases found on this server.</description>
				</comment>
				<params>
					<param name="conn" fulltype="javaxt.sql.Connection" type="Connection" />
				</params>
			</method>
			<method static="true" visibility="public" name="displayDbProperties" fulltype="void" type="void">
				<params>
					<param name="conn" fulltype="javaxt.sql.Connection" type="Connection" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns database connection information encapsulated by this class.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.ConnectionPool" type="ConnectionPool">
		<comment>
			<description>A lightweight standalone JDBC connection pool manager.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ConnectionPool">
				<comment>
					<description>Constructs a ConnectionPool with a timeout of 60 seconds.</description>
				</comment>
				<params>
					<param name="database" fulltype="javaxt.sql.Database" type="Database" />
					<param name="maxConnections" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</constructor>
			<constructor visibility="public" name="ConnectionPool">
				<comment>
					<description>Constructs a ConnectionPool.</description>
				</comment>
				<params>
					<param name="database" fulltype="javaxt.sql.Database" type="Database" />
					<param name="maxConnections" fulltype="int" type="int" />
					<param name="timeout" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</constructor>
			<constructor visibility="public" name="ConnectionPool">
				<comment>
					<description>Constructs a ConnectionPool with a timeout of 60 seconds.</description>
					<attribute name="@param">
						<description>dataSource      the data source for the connections.</description>
					</attribute>
					<attribute name="@param">
						<description>maxConnections  the maximum number of connections.</description>
					</attribute>
				</comment>
				<params>
					<param name="dataSource" comment="the data source for the connections." fulltype="javax.sql.ConnectionPoolDataSource" type="ConnectionPoolDataSource" />
					<param name="maxConnections" comment="the maximum number of connections." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="ConnectionPool">
				<comment>
					<description>Constructs a ConnectionPool.</description>
					<attribute name="@param">
						<description>dataSource      the data source for the connections.</description>
					</attribute>
					<attribute name="@param">
						<description>maxConnections  the maximum number of connections.</description>
					</attribute>
					<attribute name="@param">
						<description>timeout         the maximum time in seconds to wait for a free connection.</description>
					</attribute>
				</comment>
				<params>
					<param name="dataSource" comment="the data source for the connections." fulltype="javax.sql.ConnectionPoolDataSource" type="ConnectionPoolDataSource" />
					<param name="maxConnections" comment="the maximum number of connections." fulltype="int" type="int" />
					<param name="timeout" comment="the maximum time in seconds to wait for a free connection." fulltype="int" type="int" />
				</params>
			</constructor>
			<method synchronized="true" visibility="public" name="close" fulltype="void" type="void">
				<comment>
					<description>Closes all unused pooled connections.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="getConnection" returncomment="a new Connection object." fulltype="javaxt.sql.Connection" type="Connection">
				<comment>
					<description>Retrieves a connection from the connection pool.
 If &lt;code&gt;maxConnections&lt;/code&gt; connections are already in use, the method
 waits until a connection becomes available or &lt;code&gt;timeout&lt;/code&gt; seconds elapsed.
 When the application is finished using the connection, it must close it
 in order to return it to the pool.</description>
					<attribute name="@return">
						<description>a new Connection object.</description>
					</attribute>
					<attribute name="@throws">
						<description>TimeoutException when no connection becomes available within &lt;code&gt;timeout&lt;/code&gt; seconds.</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method synchronized="true" visibility="public" name="getActiveConnections" returncomment="the number of active connections." fulltype="int" type="int">
				<comment>
					<description>Returns the number of active (open) connections of this pool.
 This is the number of &lt;code&gt;Connection&lt;/code&gt; objects that have been
 issued by {@link #getConnection()} for which &lt;code&gt;Connection.close()&lt;/code&gt;
 has not yet been called.</description>
					<attribute name="@return">
						<description>the number of active connections.</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass superclass="RuntimeException" visibility="public" package="javaxt.sql" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="javaxt.sql.ConnectionPool.TimeoutException" type="ConnectionPool.TimeoutException">
			<comment>
				<description>Thrown in {@link #getConnection()} when no free connection becomes available within &lt;code&gt;timeout&lt;/code&gt; seconds.</description>
			</comment>
			<methods>
				<constructor visibility="public" name="ConnectionPool.TimeoutException" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="javaxt.sql" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="javaxt.sql.ConnectionPool.TimeoutException" type="ConnectionPool.TimeoutException">
		<comment>
			<description>Thrown in {@link #getConnection()} when no free connection becomes available within &lt;code&gt;timeout&lt;/code&gt; seconds.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="ConnectionPool.TimeoutException" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Connection" type="Connection">
		<comment>
			<description>Used to connect to a database via JDBC</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Connection" />
			<constructor visibility="public" name="Connection">
				<params>
					<param name="conn" fulltype="java.sql.Connection" type="Connection" />
				</params>
			</constructor>
			<method visibility="public" name="isOpen" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the connection is open.</description>
				</comment>
			</method>
			<method visibility="public" name="isClosed" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the connection is closed.</description>
				</comment>
			</method>
			<method visibility="public" name="getConnectionSpeed" fulltype="long" type="long">
				<comment>
					<description>Used to retrieve the time it took to open the database connection 
 (in milliseconds)</description>
				</comment>
			</method>
			<method visibility="public" name="getConnection" fulltype="java.sql.Connection" type="Connection">
				<comment>
					<description>Used to retrieve the java.sql.Connection for this Connection</description>
				</comment>
			</method>
			<method visibility="public" name="open" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to open a connection to the database.</description>
					<attribute name="@param">
						<description>ConnectionString A jdbc connection string/url. All connection URLs
  have the following form:
  &lt;pre&gt; jdbc:[dbVendor]://[dbName][propertyList] &lt;/pre&gt;

  Example:
  &lt;pre&gt; jdbc:derby://temp/my.db;user=admin;password=mypassword &lt;/pre&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="ConnectionString" comment="A jdbc connection string/url. All connection URLs
  have the following form:
  &lt;pre&gt; jdbc:[dbVendor]://[dbName][propertyList] &lt;/pre&gt;

  Example:
  &lt;pre&gt; jdbc:derby://temp/my.db;user=admin;password=mypassword &lt;/pre&gt;" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="open" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to open a connection to the database.</description>
				</comment>
				<params>
					<param name="database" fulltype="javaxt.sql.Database" type="Database" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="open" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to open a connection to the database using a JDBC Connection. This
  is particularly useful when using JDBC connection pools.</description>
				</comment>
				<params>
					<param name="conn" fulltype="java.sql.Connection" type="Connection" />
				</params>
			</method>
			<method visibility="public" name="close" fulltype="void" type="void">
				<comment>
					<description>Used to close a connection to the database, freeing up connections</description>
				</comment>
			</method>
			<method visibility="public" name="execute" fulltype="void" type="void">
				<comment>
					<description>Used to execute a prepared sql statement (e.g. &quot;delete from my_table&quot;).</description>
				</comment>
				<params>
					<param name="sql" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="commit" fulltype="void" type="void">
				<comment>
					<description>Used to explicitely commit changes made to the database.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.sql.SQLException" type="SQLException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDatabase" fulltype="javaxt.sql.Database" type="Database">
				<comment>
					<description>Used to return database information associated with this connection.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.sql" superclassfulltype="java.lang.Object" fulltype="javaxt.sql.Column" type="Column">
		<comment>
			<description>Used to represent a column in a table.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="Column">
				<params>
					<param name="rs" fulltype="java.sql.ResultSet" type="ResultSet" />
					<param name="table" fulltype="javaxt.sql.Table" type="Table" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getType" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getTable" fulltype="javaxt.sql.Table" type="Table" />
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getLength" fulltype="int" type="int" />
			<method visibility="public" name="isRequired" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isPrimaryKey" fulltype="boolean" type="boolean" />
			<method visibility="protected" name="setIsPrimaryKey" fulltype="void" type="void">
				<params>
					<param name="isPrimaryKey" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="isForeignKey" fulltype="boolean" type="boolean" />
			<method visibility="protected" name="setForeignKey" fulltype="void" type="void">
				<params>
					<param name="key" fulltype="javaxt.sql.Key" type="Key" />
				</params>
			</method>
			<method visibility="public" name="getForeignKey" fulltype="javaxt.sql.Key" type="Key" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.Value" type="Value">
		<comment>
			<description>A general purpose wrapper for Objects. The value can be converted into a
   number of Java primatives including strings, integers, doubles, booleans,
   etc.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Value">
				<comment>
					<description>Creates a new instance of this class.</description>
				</comment>
				<params>
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="toObject" fulltype="java.lang.Object" type="Object" />
			<method visibility="public" name="toInteger" fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Returns the value as an integer. Returns a null if there was a problem
  converting the value to an integer or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toShort" fulltype="java.lang.Short" type="Short">
				<comment>
					<description>Returns the value as a short. Returns a null if there was a problem
  converting the value to a short or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toDouble" fulltype="java.lang.Double" type="Double">
				<comment>
					<description>Returns the value as a double. Returns a null if there was a problem
  converting the value to a double or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toLong" fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Returns the value as a long. Returns a null if there was a problem
  converting the value to a long or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toBigDecimal" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns the value as a BigDecimal. Returns a null if there was a problem
  converting the value to a BigDecimal or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toFloat" fulltype="java.lang.Float" type="Float">
				<comment>
					<description>Returns the value as a float. Returns a null if there was a problem
  converting the value to a float or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toDate" fulltype="javaxt.utils.Date" type="Date">
				<comment>
					<description>Returns the value as a Date. Returns a null if there was a problem
  converting the value to a Date or if the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toByteArray" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the value as a byte array.</description>
				</comment>
			</method>
			<method visibility="public" name="toBoolean" fulltype="java.lang.Boolean" type="Boolean">
				<comment>
					<description>Returns a boolean value for the field.</description>
				</comment>
			</method>
			<method visibility="public" name="isNumeric" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine if the value is numeric.</description>
				</comment>
			</method>
			<method visibility="public" name="isNull" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the value is null.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the object by calling the object&apos;s
  native toString() method. Returns a null if the object itself is null.</description>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to compare values. Accepts any object.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.URL" type="URL">
		<comment>
			<description>Used to parse urls, extract querystring parameters, etc. Partial 
   implementation of the java.net.URL class. Provides a querystring parser 
   that is not part of the java.net.URL class. Can be used to parse non-http
   URLs, including JDBC connection strings.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="URL">
				<comment>
					<description>Creates a new instance of URL using a java.net.URL</description>
				</comment>
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<constructor visibility="public" name="URL">
				<comment>
					<description>Creates a new instance of URL using string representing a url.</description>
				</comment>
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="exists" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to test whether the url endpoint exists. Currently only supports 
  HTTP URLs.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="parseQueryString" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Used to parse a url query string and create a list of name/value pairs.
  Note that the keys are all lowercase.</description>
				</comment>
				<params>
					<param name="query" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setParameter" fulltype="void" type="void">
				<comment>
					<description>Used to set or update a value for a given parameter. If append is true,
  the value will be added to other values for this key.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
					<param name="append" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setParameter" fulltype="void" type="void">
				<comment>
					<description>Used to set or update a value for a given parameter.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getParameter" returncomment="Returns a comma delimited list of values associated with the
  given key. Returns a zero length string if the key is not found or if
  the value is null." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value of a specific variable supplied in the query string.</description>
					<attribute name="@param">
						<description>key Query string parameter name. Performs a case insensitive
   search for the keyword.</description>
					</attribute>
					<attribute name="@return">
						<description>Returns a comma delimited list of values associated with the
  given key. Returns a zero length string if the key is not found or if
  the value is null.</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="Query string parameter name. Performs a case insensitive
   search for the keyword." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getParameter" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value of a specific variable supplied in the query string.</description>
					<attribute name="@param">
						<description>keys An array containing multiple possible parameter names.
  Performs a case insensitive search for each parameter name and returns
  the value for the first match.</description>
					</attribute>
				</comment>
				<params>
					<param name="keys" comment="An array containing multiple possible parameter names.
  Performs a case insensitive search for each parameter name and returns
  the value for the first match." fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="getParameters" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Returns a list of parameters found in query string.</description>
				</comment>
			</method>
			<method visibility="public" name="removeParameter" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to remove a parameter from the query string</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getHost" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the host name or IP address found in the URL.</description>
				</comment>
			</method>
			<method visibility="public" name="setHost" fulltype="void" type="void">
				<comment>
					<description>Used to update the host name or IP address found in the URL.</description>
				</comment>
				<params>
					<param name="host" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getPort" fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Returns the server port found in the URL.</description>
				</comment>
			</method>
			<method visibility="public" name="setPort" fulltype="void" type="void">
				<comment>
					<description>Used to update the port found in the URL.</description>
				</comment>
				<params>
					<param name="port" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setProtocol" fulltype="void" type="void">
				<comment>
					<description>Used to update the protocol found in the URL.</description>
				</comment>
				<params>
					<param name="protocol" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getProtocol" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the protocol found in the URL.</description>
				</comment>
			</method>
			<method visibility="public" name="getQueryString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the query string in the URL, or an empty string if none exists.</description>
				</comment>
			</method>
			<method visibility="public" name="setQueryString" fulltype="void" type="void">
				<comment>
					<description>Used to update the query string in the URL.</description>
				</comment>
				<params>
					<param name="query" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getKeys" fulltype="java.util.HashSet" type="HashSet">
				<comment>
					<description>Returns a list of parameter names found in the query string.</description>
				</comment>
			</method>
			<method visibility="public" name="getPath" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the path portion of the URL, starting with a &quot;/&quot; character. The
  path does not include the query string. If no path is found, returns a
  null.</description>
				</comment>
			</method>
			<method visibility="public" name="setPath" fulltype="void" type="void">
				<comment>
					<description>Used to update the path portion of the URL. If the supplied path starts
  with &quot;./&quot; or &quot;../&quot;, only part of the path will be replaced. Otherwise,
  the entire path will be replaced.
  &lt;p/&gt;
  When supplying a relative path (path starting with &quot;./&quot; or &quot;../&quot;), the
  url parser assumes that directories in the original path are terminated
  with a &quot;/&quot;. For example:
  &lt;pre&gt;http://www.example.com/path/&lt;/pre&gt;
  If a path is not terminated with a &quot;/&quot;, the parser assumes that the last
  &quot;/&quot; separates a path from a file. Example:
  &lt;pre&gt;http://www.example.com/path/file.html&lt;/pre&gt;
  For example, if the original url looks like this:
  &lt;pre&gt;http://www.example.com/path/&lt;/pre&gt;
  If you provide a relative path like &quot;../index.html&quot;, will yield this:
  &lt;pre&gt;http://www.example.com/index.html&lt;/pre&gt;
  &lt;p/&gt;
  Note that if the supplied path contains a query string,
  the original query string will be replaced with the new one.</description>
				</comment>
				<params>
					<param name="path" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the URL as a string.</description>
				</comment>
			</method>
			<method visibility="public" name="toURL" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Returns a properly encoded URL for HTTP requests</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.string" type="string">
		<comment>
			<description>Used to provide functionality similar to Microsoft VB String Class</description>
		</comment>
		<methods>
			<method static="true" visibility="public" name="Replace" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="target" fulltype="java.lang.String" type="String" />
					<param name="replacement" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="replace" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="target" fulltype="java.lang.String" type="String" />
					<param name="replacement" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="Replace" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="target" fulltype="java.lang.String" type="String" />
					<param name="replacement" fulltype="java.lang.String" type="String" />
					<param name="IgnoreCase" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="replace" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="target" fulltype="java.lang.String" type="String" />
					<param name="replacement" fulltype="java.lang.String" type="String" />
					<param name="IgnoreCase" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="Split" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="split" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="Lcase" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="lcase" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="Ucase" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="ucase" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="InStr" fulltype="int" type="int">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="instr" fulltype="int" type="int">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="contains" fulltype="boolean" type="boolean">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="contains" fulltype="boolean" type="boolean">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
					<param name="IgnoreCase" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="instrRev" fulltype="int" type="int">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="ch" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="Len" fulltype="int" type="int">
				<comment>
					<description>Returns the length of a string</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="len" fulltype="int" type="int">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="Left" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns characters on the left side of a string</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="left" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="Right" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns characters on the right side of a string</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="right" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="Mid" fulltype="java.lang.String" type="String">
				<params>
					<param name="Target" fulltype="java.lang.String" type="String" />
					<param name="Start" fulltype="int" type="int" />
					<param name="Length" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="Trim" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="trim" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="RTrim" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="LTrim" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUpperCase" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the string starts with a capital letter</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="hasUpperCase" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the string contains upper-case letters.</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isPunctuation" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the string ends with a punctuation</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="UpdateCase" fulltype="java.lang.String" type="String">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="isNumeric" fulltype="boolean" type="boolean">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="toInt" fulltype="int" type="int">
				<comment>
					<description>Used to convert a string to an int. Rounds to the nearest int.</description>
				</comment>
				<params>
					<param name="d" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="toInt" fulltype="int" type="int">
				<comment>
					<description>Used to convert a double to an int. Rounds the double to the nearest int.</description>
				</comment>
				<params>
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cint" fulltype="int" type="int">
				<comment>
					<description>Used to convert a string to an int. Rounds to the nearest int.</description>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="cint" fulltype="int" type="int">
				<comment>
					<description>Used to convert a double to an int. Rounds the double to the nearest int.</description>
				</comment>
				<params>
					<param name="d" fulltype="java.lang.Double" type="Double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toDouble" fulltype="double" type="double">
				<comment>
					<description>Used to convert a string to a double.</description>
				</comment>
				<params>
					<param name="d" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="cdbl" fulltype="double" type="double">
				<comment>
					<description>Used to convert a string to a double.</description>
				</comment>
				<params>
					<param name="d" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to convert an int to a string.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="cstr" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to convert an int to a string.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<params>
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cstr" fulltype="java.lang.String" type="String">
				<params>
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toBoolean" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to convert an int to a string.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="round" fulltype="double" type="double">
				<params>
					<param name="value" fulltype="double" type="double" />
					<param name="decimalPlace" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.Date" type="Date">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>Used to parse, format, and compute dates</description>
		</comment>
		<fields>
			<field final="true" static="true" const="S" visibility="public" name="INTERVAL_MILLISECONDS" constexpr="&quot;S&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="s" visibility="public" name="INTERVAL_SECONDS" constexpr="&quot;s&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="m" visibility="public" name="INTERVAL_MINUTES" constexpr="&quot;m&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="h" visibility="public" name="INTERVAL_HOURS" constexpr="&quot;h&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="d" visibility="public" name="INTERVAL_DAYS" constexpr="&quot;d&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="w" visibility="public" name="INTERVAL_WEEKS" constexpr="&quot;w&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="m" visibility="public" name="INTERVAL_MONTHS" constexpr="&quot;m&quot;" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="y" visibility="public" name="INTERVAL_YEARS" constexpr="&quot;y&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="Date">
				<comment>
					<description>Creates a new instance of date using current time stamp</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="Date">
				<comment>
					<description>Creates a new instance of date using supplied java.util.Date</description>
				</comment>
				<params>
					<param name="date" fulltype="java.util.Date" type="Date" />
				</params>
			</constructor>
			<constructor visibility="public" name="Date">
				<comment>
					<description>Creates a new instance of date using supplied java.util.Calendar</description>
				</comment>
				<params>
					<param name="calendar" fulltype="java.util.Calendar" type="Calendar" />
				</params>
			</constructor>
			<constructor visibility="public" name="Date">
				<comment>
					<description>Creates a new instance of date using a timestamp (in milliseconds) 
  since 1/1/1970.</description>
				</comment>
				<params>
					<param name="milliseconds" fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="public" name="Date">
				<comment>
					<description>Creates a new instance of date using a String representation of a date.</description>
				</comment>
				<params>
					<param name="date" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.text.ParseException" type="ParseException" />
				</exceptions>
			</constructor>
			<constructor visibility="public" name="Date">
				<comment>
					<description>Creates a new instance of date using a date string. The format string is
  used to create a SimpleDateFormat to parse the input date string.</description>
				</comment>
				<params>
					<param name="date" fulltype="java.lang.String" type="String" />
					<param name="format" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.text.ParseException" type="ParseException" />
				</exceptions>
			</constructor>
			<method visibility="public" name="setDate" fulltype="void" type="void">
				<comment>
					<description>Used to update the current date using a date string. The format parameter
  is used to create a SimpleDateFormat to parse the input date string.</description>
				</comment>
				<params>
					<param name="date" fulltype="java.lang.String" type="String" />
					<param name="format" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.text.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method visibility="public" name="setDate" fulltype="void" type="void">
				<comment>
					<description>Used to update the current date using a predefined java.util.Date</description>
				</comment>
				<params>
					<param name="date" fulltype="java.util.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="setLocale" fulltype="void" type="void">
				<comment>
					<description>Used to update the current local</description>
				</comment>
				<params>
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method visibility="public" name="getLocale" fulltype="java.util.Locale" type="Locale">
				<comment>
					<description>Used to retrieve the current local</description>
				</comment>
			</method>
			<method visibility="public" name="setTimeZone" fulltype="void" type="void">
				<comment>
					<description>Used to set the current time zone. The time zone is used when comparing
  and formatting dates.</description>
					<attribute name="@param">
						<description>timeZone Name of the time zone (e.g. &quot;UTC&quot;, &quot;EDT&quot;, etc.)</description>
					</attribute>
					<attribute name="@param">
						<description>preserveTimeStamp Flag used to indicate whether to preserve the
  timestamp when changing time zones. Normally, when updating the timezone, 
  the timestamp is updated to the new timezone. For example, if the current 
  time is 4PM EST and you wish to switch to UTC, the timestamp would be
  updated to 8PM. The preserveTimeStamp flag allows users to preserve the
  the timestamp so that the timestamp remains fixed at 4PM.</description>
					</attribute>
				</comment>
				<params>
					<param name="timeZone" comment="Name of the time zone (e.g. &quot;UTC&quot;, &quot;EDT&quot;, etc.)" fulltype="java.lang.String" type="String" />
					<param name="preserveTimeStamp" comment="Flag used to indicate whether to preserve the
  timestamp when changing time zones. Normally, when updating the timezone, 
  the timestamp is updated to the new timezone. For example, if the current 
  time is 4PM EST and you wish to switch to UTC, the timestamp would be
  updated to 8PM. The preserveTimeStamp flag allows users to preserve the
  the timestamp so that the timestamp remains fixed at 4PM." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setTimeZone" fulltype="void" type="void">
				<comment>
					<description>Used to set the current time zone. The time zone is used when comparing
  and formatting dates.</description>
					<attribute name="@param">
						<description>timeZone Time zone (e.g. &quot;UTC&quot;, &quot;EDT&quot;, etc.)</description>
					</attribute>
					<attribute name="@param">
						<description>preserveTimeStamp Flag used to indicate whether to preserve the
  timestamp when changing time zones. Normally, when updating the timezone,
  the timestamp is updated to the new timezone. For example, if the current
  time is 4PM EST and you wish to switch to UTC, the timestamp would be
  updated to 8PM. The preserveTimeStamp flag allows users to preserve the
  the timestamp so that the timestamp remains fixed at 4PM.</description>
					</attribute>
				</comment>
				<params>
					<param name="timeZone" comment="Time zone (e.g. &quot;UTC&quot;, &quot;EDT&quot;, etc.)" fulltype="java.util.TimeZone" type="TimeZone" />
					<param name="preserveTimeStamp" comment="Flag used to indicate whether to preserve the
  timestamp when changing time zones. Normally, when updating the timezone,
  the timestamp is updated to the new timezone. For example, if the current
  time is 4PM EST and you wish to switch to UTC, the timestamp would be
  updated to 8PM. The preserveTimeStamp flag allows users to preserve the
  the timestamp so that the timestamp remains fixed at 4PM." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setTimeZone" fulltype="void" type="void">
				<comment>
					<description>Used to set the current time zone. The time zone is used when comparing
  and formatting dates.</description>
					<attribute name="@param">
						<description>timeZone Name of the time zone (e.g. &quot;UTC&quot;, &quot;EST&quot;, etc.)</description>
					</attribute>
				</comment>
				<params>
					<param name="timeZone" comment="Name of the time zone (e.g. &quot;UTC&quot;, &quot;EST&quot;, etc.)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setTimeZone" fulltype="void" type="void">
				<comment>
					<description>Used to set the current time zone. The time zone is used when comparing
  and formatting dates.</description>
				</comment>
				<params>
					<param name="timeZone" fulltype="java.util.TimeZone" type="TimeZone" />
				</params>
			</method>
			<method visibility="public" name="getTimeZone" fulltype="java.util.TimeZone" type="TimeZone">
				<comment>
					<description>Returns the current time zone. The time zone is used when comparing
  and formatting dates.</description>
				</comment>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the current date as a String in the following format:
  &quot;EEE MMM dd HH:mm:ss z yyyy&quot;</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to format the current date into a string.</description>
					<attribute name="@param">
						<description>format Pattern used to format the date (e.g. &quot;MM/dd/yyyy hh:mm a&quot;, 
  &quot;EEE MMM dd HH:mm:ss z yyyy&quot;, etc). Please refer to the
  java.text.SimpleDateFormat class for more information.</description>
					</attribute>
				</comment>
				<params>
					<param name="format" comment="Pattern used to format the date (e.g. &quot;MM/dd/yyyy hh:mm a&quot;, 
  &quot;EEE MMM dd HH:mm:ss z yyyy&quot;, etc). Please refer to the
  java.text.SimpleDateFormat class for more information." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<params>
					<param name="format" fulltype="java.lang.String" type="String" />
					<param name="timeZone" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<params>
					<param name="format" fulltype="java.lang.String" type="String" />
					<param name="timeZone" fulltype="java.util.TimeZone" type="TimeZone" />
				</params>
			</method>
			<method visibility="public" name="toISOString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the date in ISO 8601 format (e.g. &quot;2013-01-04T05:00:00.000Z&quot;).
  Note that ISO dates are in UTC.</description>
				</comment>
			</method>
			<method visibility="public" name="toLong" fulltype="long" type="long">
				<comment>
					<description>Returns a long integer used to represent the Date in the following
  format: &quot;yyyyMMddHHmmssSSS&quot;. The time zone is automatically set to UTC.
  This is useful for perform simple date comparisons and storing dates
  in a database as integers (e.g. SQLite). Here&apos;s an example of how to
  go from a date to a long and a long to a date:
   &lt;pre&gt;
        javaxt.utils.Date orgDate = new javaxt.utils.Date();
        Long l = orgDate.toLong(); //&quot;yyyyMMddHHmmssSSS&quot; formatted long in UTC
        javaxt.utils.Date newDate = new javaxt.utils.Date(l+&quot;&quot;);
        newDate.setTimeZone(&quot;UTC&quot;, true);
        System.out.println(newDate);
   &lt;/pre&gt;
  Note that this method is different from the getTime() method which
  returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</description>
				</comment>
			</method>
			<method visibility="public" name="clone" fulltype="javaxt.utils.Date" type="Date">
				<comment>
					<description>Creates a copy of this object. Any modifications to the clone, will not
  affect the original.</description>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to compare dates and determine whether they are equal.</description>
					<attribute name="@param">
						<description>obj Accepts a java.util.Date, a javaxt.utils.Date, or a String.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="Accepts a java.util.Date, a javaxt.utils.Date, or a String." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="compareTo" fulltype="long" type="long">
				<comment>
					<description>Used to compare dates. Returns the number of intervals between two dates.
  If the given date is in the future, returns a negative value. If the
  given date is in the past, returns a positive value.</description>
					<attribute name="@param">
						<description>units Units of measure (e.g. hours, minutes, seconds, weeks,
  months, years, etc.)</description>
					</attribute>
				</comment>
				<params>
					<param name="date" fulltype="javaxt.utils.Date" type="Date" />
					<param name="units" comment="Units of measure (e.g. hours, minutes, seconds, weeks,
  months, years, etc.)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="compareTo" fulltype="long" type="long">
				<comment>
					<description>Used to compare dates. Returns the number of intervals between two dates</description>
					<attribute name="@param">
						<description>units Units of measure (e.g. hours, minutes, seconds, weeks, 
  months, years, etc.)</description>
					</attribute>
				</comment>
				<params>
					<param name="date" fulltype="java.util.Date" type="Date" />
					<param name="units" comment="Units of measure (e.g. hours, minutes, seconds, weeks, 
  months, years, etc.)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="isBefore" fulltype="boolean" type="boolean">
				<params>
					<param name="date" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.text.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method visibility="public" name="isBefore" fulltype="boolean" type="boolean">
				<params>
					<param name="Date" fulltype="javaxt.utils.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="isAfter" fulltype="boolean" type="boolean">
				<params>
					<param name="date" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.text.ParseException" type="ParseException" />
				</exceptions>
			</method>
			<method visibility="public" name="isAfter" fulltype="boolean" type="boolean">
				<params>
					<param name="Date" fulltype="javaxt.utils.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="add" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Used to update the current date by adding to (or subtracting from) the
  current date. Example:
   &lt;pre&gt;
    javaxt.utils.Date date = new javaxt.utils.Date();
    System.out.println(&quot;Today is: &quot; + date);
    date.add(-1, &quot;day&quot;);
    System.out.println(&quot;Yesterday was: &quot; + date);
   &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>units Unit of measure (e.g. hours, minutes, seconds, days, weeks,
  months, years, etc.)</description>
					</attribute>
				</comment>
				<params>
					<param name="amount" fulltype="int" type="int" />
					<param name="units" comment="Unit of measure (e.g. hours, minutes, seconds, days, weeks,
  months, years, etc.)" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getDate" fulltype="java.util.Date" type="Date">
				<comment>
					<description>Returns the java.utils.Date representation of this object</description>
				</comment>
			</method>
			<method visibility="public" name="getTime" fulltype="long" type="long">
				<comment>
					<description>Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
  represented by this Date object.</description>
				</comment>
			</method>
			<method visibility="public" name="getCalendar" fulltype="java.util.Calendar" type="Calendar">
				<comment>
					<description>Returns the java.utils.Calender representation of this object</description>
				</comment>
			</method>
			<method visibility="public" name="getWeekdayName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the day of the week. Example: &quot;Monday&quot;</description>
				</comment>
			</method>
			<method visibility="public" name="getMonthName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the month. Example: &quot;January&quot;</description>
				</comment>
			</method>
			<method visibility="public" name="getDayOfWeek" fulltype="int" type="int">
				<comment>
					<description>Returns the day of the week. Example: Monday = 1</description>
				</comment>
			</method>
			<method visibility="public" name="getWeekInMonth" fulltype="int" type="int">
				<comment>
					<description>Returns the week number in a given month. Example: 11/14/2006 = 3</description>
				</comment>
			</method>
			<method visibility="public" name="getDayInYear" fulltype="int" type="int">
				<comment>
					<description>Returns the day of the year. Example: 11/14/2006 = 318</description>
				</comment>
			</method>
			<method visibility="public" name="getWeekInYear" fulltype="int" type="int">
				<comment>
					<description>Returns the week number within a given year. Example: 11/14/2006 = 46</description>
				</comment>
			</method>
			<method visibility="public" name="getYear" fulltype="int" type="int">
				<comment>
					<description>Returns the current year. Example: 11/14/2006 = 2006</description>
				</comment>
			</method>
			<method visibility="public" name="getMonth" fulltype="int" type="int">
				<comment>
					<description>Returns the current month. Example: 11/14/2006 = 11</description>
				</comment>
			</method>
			<method visibility="public" name="getDay" fulltype="int" type="int">
				<comment>
					<description>Returns the current day of the month. Example: 11/14/2006 = 14</description>
				</comment>
			</method>
			<method visibility="public" name="getHour" fulltype="int" type="int">
				<comment>
					<description>Returns the current hour of the day. Example: 12:00 AM = 0, 1:00 PM = 13</description>
				</comment>
			</method>
			<method visibility="public" name="getMinute" fulltype="int" type="int">
				<comment>
					<description>Returns the current minute of the hour. Example: 12:01 = 1</description>
				</comment>
			</method>
			<method visibility="public" name="getSecond" fulltype="int" type="int">
				<comment>
					<description>Returns the current second of the minute. Example: 12:00:01 = 1</description>
				</comment>
			</method>
			<method visibility="public" name="getMilliSecond" fulltype="int" type="int">
				<comment>
					<description>Returns the current millisecond of the second. Example: 12:00:00:01 = 1</description>
				</comment>
			</method>
			<method visibility="public" name="hasTimeStamp" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether the date has a timestamp.</description>
				</comment>
			</method>
			<method visibility="public" name="removeTimeStamp" fulltype="void" type="void">
				<comment>
					<description>Updates the date by removing the timestamp</description>
				</comment>
			</method>
			<method visibility="public" name="compareTo" fulltype="int" type="int">
				<comment>
					<description>Compares two dates for ordering. Older dates appear first in an ordered
  list like a TreeSet.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="sortDates" fulltype="java.util.List" type="List">
				<comment>
					<description>Static method used to sort dates in a list. Older dates appear first in
  the output.</description>
				</comment>
				<params>
					<param name="dates" fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method static="true" visibility="public" name="getTimeZone" fulltype="java.util.TimeZone" type="TimeZone">
				<comment>
					<description>Static method used to return a timezone for a given ID. Unlike the 
  java.util.TimeZone.getTimeZone() method, this method will return a null
  if a given ID cannot be understood.</description>
					<attribute name="@param">
						<description>timezone The name or ID of a TimeZone. Supports common
  abbreviations such as &quot;EST&quot; or &quot;EDT&quot;, full names such as &quot;Eastern
  Standard Time&quot; or &quot;America/New York&quot;, and raw GMT offsets such as
  &quot;GMT-8:00&quot;.</description>
					</attribute>
				</comment>
				<params>
					<param name="timezone" comment="The name or ID of a TimeZone. Supports common
  abbreviations such as &quot;EST&quot; or &quot;EDT&quot;, full names such as &quot;Eastern
  Standard Time&quot; or &quot;America/New York&quot;, and raw GMT offsets such as
  &quot;GMT-8:00&quot;." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getTimeZones" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Returns a hashmap of all known time zones. Includes time zones packaged
  with Java, Microsoft, and a few others.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.Compiler" type="Compiler">
		<comment>
			<description>Dynamic, in-memory, Java compiler. Sample usage:
 &lt;pre&gt;
        StringBuilder src = new StringBuilder();
        src.append(&quot;public class MyClass {\n&quot;);
        src.append(&quot;    public String toString() {\n&quot;);
        src.append(&quot;        return \&quot;Hello, Peter I am \&quot; + &quot;);
        src.append(&quot;this.getClass().getSimpleName();\n&quot;);
        src.append(&quot;    }\n&quot;);
        src.append(&quot;}\n&quot;);        

        Class _class = Compiler.compile(&quot;MyClass&quot;, src.toString());
        Object instance = _class.newInstance();
        System.out.println(instance);
 &lt;/pre&gt;  
 
   Original source code can be found here: &lt;br/&gt;
   http://www.javablogging.com/dynamic-in-memory-compilation/</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Compiler" />
			<method static="true" visibility="public" name="compile" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Used to compile a block of code.</description>
					<attribute name="@param">
						<description>className Full name of the class that will be compiled. If class 
  should be in some package, className should contain it too 
  (ex. &quot;com.example.MyClass&quot;)</description>
					</attribute>
					<attribute name="@param">
						<description>src Source code.</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="Full name of the class that will be compiled. If class 
  should be in some package, className should contain it too 
  (ex. &quot;com.example.MyClass&quot;)" fulltype="java.lang.String" type="String" />
					<param name="src" comment="Source code." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.Base64" type="Base64">
		<comment>
			<description>Encodes and decodes to and from Base64 notation. The code was written by
 Robert Harder (v2.1): &lt;br/&gt;
 &lt;a href=&quot;http://iharder.net/base64&quot;&gt;http://iharder.net/base64&lt;/a&gt;</description>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="NO_OPTIONS" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>No options specified. Value is zero.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="ENCODE" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Specify encoding.</description>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="DECODE" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Specify decoding.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="GZIP" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>Specify that data should be gzip-compressed.</description>
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="DONT_BREAK_LINES" constexpr="8" fulltype="int" type="int">
				<comment>
					<description>Don&apos;t break lines when encoding (violates strict Base64 specification)</description>
				</comment>
			</field>
		</fields>
		<methods>
			<method static="true" visibility="public" name="encodeObject" returncomment="The Base64-encoded object" fulltype="java.lang.String" type="String">
				<comment>
					<description>Serializes an object and returns the Base64-encoded
 version of that serialized object. If the object
 cannot be serialized or there is another error,
 the method will return &lt;tt&gt;null&lt;/tt&gt;.
 The object is not GZip-compressed before being encoded.</description>
					<attribute name="@param">
						<description>serializableObject The object to encode</description>
					</attribute>
					<attribute name="@return">
						<description>The Base64-encoded object</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="serializableObject" comment="The object to encode" fulltype="java.io.Serializable" type="Serializable" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeObject" returncomment="The Base64-encoded object" fulltype="java.lang.String" type="String">
				<comment>
					<description>Serializes an object and returns the Base64-encoded
 version of that serialized object. If the object
 cannot be serialized or there is another error,
 the method will return &lt;tt&gt;null&lt;/tt&gt;.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   GZIP: gzip-compresses object before encoding it.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;encodeObject( myObj, Base64.GZIP )&lt;/code&gt; or
 &lt;p&gt;
 Example: &lt;code&gt;encodeObject( myObj, Base64.GZIP | Base64.DONT_BREAK_LINES )&lt;/code&gt;</description>
					<attribute name="@param">
						<description>serializableObject The object to encode</description>
					</attribute>
					<attribute name="@param">
						<description>options Specified options</description>
					</attribute>
					<attribute name="@return">
						<description>The Base64-encoded object</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#GZIP</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DONT_BREAK_LINES</description>
					</attribute>
					<attribute name="@since">
						<description>2.0</description>
					</attribute>
				</comment>
				<params>
					<param name="serializableObject" comment="The object to encode" fulltype="java.io.Serializable" type="Serializable" />
					<param name="options" comment="Specified options" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeBytes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Encodes a byte array into Base64 notation.
 Does not GZip-compress data.</description>
					<attribute name="@param">
						<description>source The data to convert</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The data to convert" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeBytes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Encodes a byte array into Base64 notation.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   GZIP: gzip-compresses object before encoding it.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP )&lt;/code&gt; or
 &lt;p&gt;
 Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )&lt;/code&gt;</description>
					<attribute name="@param">
						<description>source The data to convert</description>
					</attribute>
					<attribute name="@param">
						<description>options Specified options</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#GZIP</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DONT_BREAK_LINES</description>
					</attribute>
					<attribute name="@since">
						<description>2.0</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The data to convert" fulltype="byte[]" type="byte" />
					<param name="options" comment="Specified options" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeBytes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Encodes a byte array into Base64 notation.
 Does not GZip-compress data.</description>
					<attribute name="@param">
						<description>source The data to convert</description>
					</attribute>
					<attribute name="@param">
						<description>off Offset in array where conversion should begin</description>
					</attribute>
					<attribute name="@param">
						<description>len Length of data to convert</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The data to convert" fulltype="byte[]" type="byte" />
					<param name="off" comment="Offset in array where conversion should begin" fulltype="int" type="int" />
					<param name="len" comment="Length of data to convert" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeBytes" fulltype="java.lang.String" type="String">
				<comment>
					<description>Encodes a byte array into Base64 notation.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   GZIP: gzip-compresses object before encoding it.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP )&lt;/code&gt; or
 &lt;p&gt;
 Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP | Base64.DONT_BREAK_LINES )&lt;/code&gt;</description>
					<attribute name="@param">
						<description>source The data to convert</description>
					</attribute>
					<attribute name="@param">
						<description>off Offset in array where conversion should begin</description>
					</attribute>
					<attribute name="@param">
						<description>len Length of data to convert</description>
					</attribute>
					<attribute name="@param">
						<description>options Specified options</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#GZIP</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DONT_BREAK_LINES</description>
					</attribute>
					<attribute name="@since">
						<description>2.0</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The data to convert" fulltype="byte[]" type="byte" />
					<param name="off" comment="Offset in array where conversion should begin" fulltype="int" type="int" />
					<param name="len" comment="Length of data to convert" fulltype="int" type="int" />
					<param name="options" comment="Specified options" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="decode" returncomment="decoded data" fulltype="byte[]" type="byte">
				<comment>
					<description>Very low-level access to decoding ASCII characters in
 the form of a byte array. Does not support automatically
 gunzipping or any other &quot;fancy&quot; features.</description>
					<attribute name="@param">
						<description>source The Base64 encoded data</description>
					</attribute>
					<attribute name="@param">
						<description>off    The offset of where to begin decoding</description>
					</attribute>
					<attribute name="@param">
						<description>len    The length of characters to decode</description>
					</attribute>
					<attribute name="@return">
						<description>decoded data</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="The Base64 encoded data" fulltype="byte[]" type="byte" />
					<param name="off" comment="The offset of where to begin decoding" fulltype="int" type="int" />
					<param name="len" comment="The length of characters to decode" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="decode" returncomment="the decoded data" fulltype="byte[]" type="byte">
				<comment>
					<description>Decodes data from Base64 notation, automatically
 detecting gzip-compressed data and decompressing it.</description>
					<attribute name="@param">
						<description>s the String to decode</description>
					</attribute>
					<attribute name="@return">
						<description>the decoded data</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the String to decode" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="decodeToObject" returncomment="The decoded and deserialized object" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Attempts to decode Base64 data and deserialize a Java
 Object within. Returns &lt;tt&gt;null&lt;/tt&gt; if there was an error.</description>
					<attribute name="@param">
						<description>encodedObject The Base64 data to decode</description>
					</attribute>
					<attribute name="@return">
						<description>The decoded and deserialized object</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="encodedObject" comment="The Base64 data to decode" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeToFile" returncomment="&lt;tt&gt;true&lt;/tt&gt; if successful, &lt;tt&gt;false&lt;/tt&gt; otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Convenience method for encoding data to a file.</description>
					<attribute name="@param">
						<description>dataToEncode byte array of data to encode in base64 form</description>
					</attribute>
					<attribute name="@param">
						<description>filename Filename for saving encoded data</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if successful, &lt;tt&gt;false&lt;/tt&gt; otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>2.1</description>
					</attribute>
				</comment>
				<params>
					<param name="dataToEncode" comment="byte array of data to encode in base64 form" fulltype="byte[]" type="byte" />
					<param name="filename" comment="Filename for saving encoded data" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="decodeToFile" returncomment="&lt;tt&gt;true&lt;/tt&gt; if successful, &lt;tt&gt;false&lt;/tt&gt; otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Convenience method for decoding data to a file.</description>
					<attribute name="@param">
						<description>dataToDecode Base64-encoded data as a String</description>
					</attribute>
					<attribute name="@param">
						<description>filename Filename for saving decoded data</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if successful, &lt;tt&gt;false&lt;/tt&gt; otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>2.1</description>
					</attribute>
				</comment>
				<params>
					<param name="dataToDecode" comment="Base64-encoded data as a String" fulltype="java.lang.String" type="String" />
					<param name="filename" comment="Filename for saving decoded data" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="decodeFromFile" returncomment="decoded byte array or null if unsuccessful" fulltype="byte[]" type="byte">
				<comment>
					<description>Convenience method for reading a base64-encoded
 file and decoding it.</description>
					<attribute name="@param">
						<description>filename Filename for reading encoded data</description>
					</attribute>
					<attribute name="@return">
						<description>decoded byte array or null if unsuccessful</description>
					</attribute>
					<attribute name="@since">
						<description>2.1</description>
					</attribute>
				</comment>
				<params>
					<param name="filename" comment="Filename for reading encoded data" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="encodeFromFile" returncomment="base64-encoded String or null if unsuccessful" fulltype="java.lang.String" type="String">
				<comment>
					<description>Convenience method for reading a binary file
 and base64-encoding it.</description>
					<attribute name="@param">
						<description>filename Filename for reading binary data</description>
					</attribute>
					<attribute name="@return">
						<description>base64-encoded String or null if unsuccessful</description>
					</attribute>
					<attribute name="@since">
						<description>2.1</description>
					</attribute>
				</comment>
				<params>
					<param name="filename" comment="Filename for reading binary data" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
		<jelclass superclass="FilterInputStream" visibility="public" package="javaxt.utils" superclassfulltype="java.io.FilterInputStream" fulltype="javaxt.utils.Base64.InputStream" type="Base64.InputStream">
			<comment>
				<description>A {@link Base64.InputStream} will read data from another
 &lt;tt&gt;java.io.InputStream&lt;/tt&gt;, given in the constructor,
 and encode/decode to/from Base64 notation on the fly.</description>
				<attribute name="@see">
					<description>Base64</description>
				</attribute>
				<attribute name="@since">
					<description>1.3</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="Base64.InputStream">
					<comment>
						<description>Constructs a {@link Base64.InputStream} in DECODE mode.</description>
						<attribute name="@param">
							<description>in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<params>
						<param name="in" comment="the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data." fulltype="java.io.InputStream" type="InputStream" />
					</params>
				</constructor>
				<constructor visibility="public" name="Base64.InputStream">
					<comment>
						<description>Constructs a {@link Base64.InputStream} in
 either ENCODE or DECODE mode.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   ENCODE or DECODE: Encode or Decode as data is read.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     (only meaningful when encoding)
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;new Base64.InputStream( in, Base64.DECODE )&lt;/code&gt;</description>
						<attribute name="@param">
							<description>in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.</description>
						</attribute>
						<attribute name="@param">
							<description>options Specified options</description>
						</attribute>
						<attribute name="@see">
							<description>Base64#ENCODE</description>
						</attribute>
						<attribute name="@see">
							<description>Base64#DECODE</description>
						</attribute>
						<attribute name="@see">
							<description>Base64#DONT_BREAK_LINES</description>
						</attribute>
						<attribute name="@since">
							<description>2.0</description>
						</attribute>
					</comment>
					<params>
						<param name="in" comment="the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data." fulltype="java.io.InputStream" type="InputStream" />
						<param name="options" comment="Specified options" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="read" returncomment="next byte" fulltype="int" type="int">
					<comment>
						<description>Reads enough of the input stream to convert
 to/from Base64 and returns the next byte.</description>
						<attribute name="@return">
							<description>next byte</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="read" returncomment="bytes read into array or -1 if end of stream is encountered." fulltype="int" type="int">
					<comment>
						<description>Calls {@link #read()} repeatedly until the end of stream
 is reached or &lt;var&gt;len&lt;/var&gt; bytes are read.
 Returns number of bytes read into array or -1 if
 end of stream is encountered.</description>
						<attribute name="@param">
							<description>dest array to hold values</description>
						</attribute>
						<attribute name="@param">
							<description>off offset for array</description>
						</attribute>
						<attribute name="@param">
							<description>len max number of bytes to read into array</description>
						</attribute>
						<attribute name="@return">
							<description>bytes read into array or -1 if end of stream is encountered.</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<params>
						<param name="dest" comment="array to hold values" fulltype="byte[]" type="byte" />
						<param name="off" comment="offset for array" fulltype="int" type="int" />
						<param name="len" comment="max number of bytes to read into array" fulltype="int" type="int" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="FilterOutputStream" visibility="public" package="javaxt.utils" superclassfulltype="java.io.FilterOutputStream" fulltype="javaxt.utils.Base64.OutputStream" type="Base64.OutputStream">
			<comment>
				<description>A {@link Base64.OutputStream} will write data to another
 &lt;tt&gt;java.io.OutputStream&lt;/tt&gt;, given in the constructor,
 and encode/decode to/from Base64 notation on the fly.</description>
				<attribute name="@see">
					<description>Base64</description>
				</attribute>
				<attribute name="@since">
					<description>1.3</description>
				</attribute>
			</comment>
			<methods>
				<constructor visibility="public" name="Base64.OutputStream">
					<comment>
						<description>Constructs a {@link Base64.OutputStream} in ENCODE mode.</description>
						<attribute name="@param">
							<description>out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<params>
						<param name="out" comment="the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written." fulltype="java.io.OutputStream" type="OutputStream" />
					</params>
				</constructor>
				<constructor visibility="public" name="Base64.OutputStream">
					<comment>
						<description>Constructs a {@link Base64.OutputStream} in
 either ENCODE or DECODE mode.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   ENCODE or DECODE: Encode or Decode as data is read.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     (only meaningful when encoding)
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;new Base64.OutputStream( out, Base64.ENCODE )&lt;/code&gt;</description>
						<attribute name="@param">
							<description>out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.</description>
						</attribute>
						<attribute name="@param">
							<description>options Specified options.</description>
						</attribute>
						<attribute name="@see">
							<description>Base64#ENCODE</description>
						</attribute>
						<attribute name="@see">
							<description>Base64#DECODE</description>
						</attribute>
						<attribute name="@see">
							<description>Base64#DONT_BREAK_LINES</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<params>
						<param name="out" comment="the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written." fulltype="java.io.OutputStream" type="OutputStream" />
						<param name="options" comment="Specified options." fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="public" name="write" fulltype="void" type="void">
					<comment>
						<description>Writes the byte to the output stream after
 converting to/from Base64 notation.
 When encoding, bytes are buffered three
 at a time before the output stream actually
 gets a write() call.
 When decoding, bytes are buffered four
 at a time.</description>
						<attribute name="@param">
							<description>theByte the byte to write</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<params>
						<param name="theByte" comment="the byte to write" fulltype="int" type="int" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="write" fulltype="void" type="void">
					<comment>
						<description>Calls {@link #write(int)} repeatedly until &lt;var&gt;len&lt;/var&gt; 
 bytes are written.</description>
						<attribute name="@param">
							<description>theBytes array from which to read bytes</description>
						</attribute>
						<attribute name="@param">
							<description>off offset for array</description>
						</attribute>
						<attribute name="@param">
							<description>len max number of bytes to read into array</description>
						</attribute>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<params>
						<param name="theBytes" comment="array from which to read bytes" fulltype="byte[]" type="byte" />
						<param name="off" comment="offset for array" fulltype="int" type="int" />
						<param name="len" comment="max number of bytes to read into array" fulltype="int" type="int" />
					</params>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="flushBase64" fulltype="void" type="void">
					<comment>
						<description>Method added by PHIL. [Thanks, PHIL. -Rob]
 This pads the buffer without closing the stream.</description>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="close" fulltype="void" type="void">
					<comment>
						<description>Flushes and closes (I think, in the superclass) the stream.</description>
						<attribute name="@since">
							<description>1.3</description>
						</attribute>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="suspendEncoding" fulltype="void" type="void">
					<comment>
						<description>Suspends encoding of the stream.
 May be helpful if you need to embed a piece of
 base640-encoded data in a stream.</description>
						<attribute name="@since">
							<description>1.5.1</description>
						</attribute>
					</comment>
					<exceptions>
						<exception fulltype="java.io.IOException" type="IOException" />
					</exceptions>
				</method>
				<method visibility="public" name="resumeEncoding" fulltype="void" type="void">
					<comment>
						<description>Resumes encoding of the stream.
 May be helpful if you need to embed a piece of
 base640-encoded data in a stream.</description>
						<attribute name="@since">
							<description>1.5.1</description>
						</attribute>
					</comment>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="FilterInputStream" visibility="public" package="javaxt.utils" superclassfulltype="java.io.FilterInputStream" fulltype="javaxt.utils.Base64.InputStream" type="Base64.InputStream">
		<comment>
			<description>A {@link Base64.InputStream} will read data from another
 &lt;tt&gt;java.io.InputStream&lt;/tt&gt;, given in the constructor,
 and encode/decode to/from Base64 notation on the fly.</description>
			<attribute name="@see">
				<description>Base64</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Base64.InputStream">
				<comment>
					<description>Constructs a {@link Base64.InputStream} in DECODE mode.</description>
					<attribute name="@param">
						<description>in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data." fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</constructor>
			<constructor visibility="public" name="Base64.InputStream">
				<comment>
					<description>Constructs a {@link Base64.InputStream} in
 either ENCODE or DECODE mode.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   ENCODE or DECODE: Encode or Decode as data is read.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     (only meaningful when encoding)
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;new Base64.InputStream( in, Base64.DECODE )&lt;/code&gt;</description>
					<attribute name="@param">
						<description>in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.</description>
					</attribute>
					<attribute name="@param">
						<description>options Specified options</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#ENCODE</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DECODE</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DONT_BREAK_LINES</description>
					</attribute>
					<attribute name="@since">
						<description>2.0</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data." fulltype="java.io.InputStream" type="InputStream" />
					<param name="options" comment="Specified options" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="read" returncomment="next byte" fulltype="int" type="int">
				<comment>
					<description>Reads enough of the input stream to convert
 to/from Base64 and returns the next byte.</description>
					<attribute name="@return">
						<description>next byte</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="read" returncomment="bytes read into array or -1 if end of stream is encountered." fulltype="int" type="int">
				<comment>
					<description>Calls {@link #read()} repeatedly until the end of stream
 is reached or &lt;var&gt;len&lt;/var&gt; bytes are read.
 Returns number of bytes read into array or -1 if
 end of stream is encountered.</description>
					<attribute name="@param">
						<description>dest array to hold values</description>
					</attribute>
					<attribute name="@param">
						<description>off offset for array</description>
					</attribute>
					<attribute name="@param">
						<description>len max number of bytes to read into array</description>
					</attribute>
					<attribute name="@return">
						<description>bytes read into array or -1 if end of stream is encountered.</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="dest" comment="array to hold values" fulltype="byte[]" type="byte" />
					<param name="off" comment="offset for array" fulltype="int" type="int" />
					<param name="len" comment="max number of bytes to read into array" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="FilterOutputStream" visibility="public" package="javaxt.utils" superclassfulltype="java.io.FilterOutputStream" fulltype="javaxt.utils.Base64.OutputStream" type="Base64.OutputStream">
		<comment>
			<description>A {@link Base64.OutputStream} will write data to another
 &lt;tt&gt;java.io.OutputStream&lt;/tt&gt;, given in the constructor,
 and encode/decode to/from Base64 notation on the fly.</description>
			<attribute name="@see">
				<description>Base64</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Base64.OutputStream">
				<comment>
					<description>Constructs a {@link Base64.OutputStream} in ENCODE mode.</description>
					<attribute name="@param">
						<description>out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="out" comment="the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written." fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
			</constructor>
			<constructor visibility="public" name="Base64.OutputStream">
				<comment>
					<description>Constructs a {@link Base64.OutputStream} in
 either ENCODE or DECODE mode.
 &lt;p&gt;
 Valid options:&lt;pre&gt;
   ENCODE or DECODE: Encode or Decode as data is read.
   DONT_BREAK_LINES: don&apos;t break lines at 76 characters
     (only meaningful when encoding)
     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
 &lt;/pre&gt;
 &lt;p&gt;
 Example: &lt;code&gt;new Base64.OutputStream( out, Base64.ENCODE )&lt;/code&gt;</description>
					<attribute name="@param">
						<description>out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.</description>
					</attribute>
					<attribute name="@param">
						<description>options Specified options.</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#ENCODE</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DECODE</description>
					</attribute>
					<attribute name="@see">
						<description>Base64#DONT_BREAK_LINES</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="out" comment="the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written." fulltype="java.io.OutputStream" type="OutputStream" />
					<param name="options" comment="Specified options." fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Writes the byte to the output stream after
 converting to/from Base64 notation.
 When encoding, bytes are buffered three
 at a time before the output stream actually
 gets a write() call.
 When decoding, bytes are buffered four
 at a time.</description>
					<attribute name="@param">
						<description>theByte the byte to write</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="theByte" comment="the byte to write" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="write" fulltype="void" type="void">
				<comment>
					<description>Calls {@link #write(int)} repeatedly until &lt;var&gt;len&lt;/var&gt; 
 bytes are written.</description>
					<attribute name="@param">
						<description>theBytes array from which to read bytes</description>
					</attribute>
					<attribute name="@param">
						<description>off offset for array</description>
					</attribute>
					<attribute name="@param">
						<description>len max number of bytes to read into array</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="theBytes" comment="array from which to read bytes" fulltype="byte[]" type="byte" />
					<param name="off" comment="offset for array" fulltype="int" type="int" />
					<param name="len" comment="max number of bytes to read into array" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="flushBase64" fulltype="void" type="void">
				<comment>
					<description>Method added by PHIL. [Thanks, PHIL. -Rob]
 This pads the buffer without closing the stream.</description>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="close" fulltype="void" type="void">
				<comment>
					<description>Flushes and closes (I think, in the superclass) the stream.</description>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="suspendEncoding" fulltype="void" type="void">
				<comment>
					<description>Suspends encoding of the stream.
 May be helpful if you need to embed a piece of
 base640-encoded data in a stream.</description>
					<attribute name="@since">
						<description>1.5.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="resumeEncoding" fulltype="void" type="void">
				<comment>
					<description>Resumes encoding of the stream.
 May be helpful if you need to embed a piece of
 base640-encoded data in a stream.</description>
					<attribute name="@since">
						<description>1.5.1</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.utils" superclassfulltype="java.lang.Object" fulltype="javaxt.utils.Array" type="Array">
		<comment>
			<description>Used to construct a 2d array of name/value pairs. The array is
   automatically resized whenever entries are added or deleted. This class
   serves much the same function as a HashMap except that this class
   makes it a little easier to create/retrieve entries with multiple values.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Array">
				<comment>
					<description>Creates a new instance of Array.</description>
				</comment>
			</constructor>
			<method visibility="public" name="add" fulltype="void" type="void">
				<comment>
					<description>Used to add an entry to the array.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.Object" type="Object" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="put" fulltype="void" type="void">
				<comment>
					<description>Used to add an entry to the array. This method is identical to the add
   method.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.Object" type="Object" />
					<param name="value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="get" fulltype="javaxt.utils.Value[]" type="Value">
				<comment>
					<description>Used to retrieve an entry in the array. Returns an array of values
   associated with a given key.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="remove" fulltype="void" type="void">
				<comment>
					<description>Used to remove an entry from the array.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.WSDL" type="WSDL">
		<comment>
			<description>Used to parse a WSDL return information about the web services documented
   in the WSDL including service name and description, web methods, and input
   parameters.

 &lt;pre&gt;
javaxt.webservices.WSDL wsdl = new javaxt.webservices.WSDL(url);
for (javaxt.webservices.Service service : wsdl.getServices()){
    System.out.println(service.getName());
    for (javaxt.webservices.Method method : service.getMethods()){
        System.out.println(&quot; - &quot; + method.getName());
        javaxt.webservices.Parameters parameters = method.getParameters();
        if (parameters!=null){
            for (javaxt.webservices.Parameter parameter : parameters.getArray()){
                System.out.println(&quot;   * &quot; + parameter.getName());
            }
        }
    }
}
 &lt;/pre&gt;</description>
		</comment>
		<methods>
			<constructor visibility="public" name="WSDL">
				<comment>
					<description>Instantiate wsdl parser using a url to a wsdl (java.net.url)</description>
				</comment>
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="url" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
					<param name="HttpProxyServer" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="xml" fulltype="java.io.File" type="File" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="xml" fulltype="java.io.File" type="File" />
					<param name="followImports" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="wsdl" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="wsdl" fulltype="org.w3c.dom.Document" type="Document" />
					<param name="followImports" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="wsdl" fulltype="org.w3c.dom.Document" type="Document" />
					<param name="xsd" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="wsdl" fulltype="org.w3c.dom.Document" type="Document" />
					<param name="xsd" fulltype="org.w3c.dom.Document[]" type="Document" />
				</params>
			</constructor>
			<constructor visibility="public" name="WSDL">
				<params>
					<param name="wsdl" fulltype="org.w3c.dom.Document" type="Document" />
					<param name="xsd" fulltype="org.w3c.dom.Document[]" type="Document" />
					<param name="followImports" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<method visibility="public" name="getSSD" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Returns a Simple Service Description (SSD) - an xml document which
  outlines all the web methods and input parameters defined in
  the WSDL. This document is significantly easier to parse and understand
  than the original WSDL.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representing an XML document containing a Simple
  Service Description (SSD). Please see the getSSD() for more information.</description>
				</comment>
			</method>
			<method visibility="public" name="addSchema" fulltype="void" type="void">
				<comment>
					<description>Used to add an external XSD.</description>
					<attribute name="@param">
						<description>followImports Flag used to indicate whether to download/parse XSD
  files referenced by the schema/import nodes.</description>
					</attribute>
				</comment>
				<params>
					<param name="xsd" fulltype="org.w3c.dom.Document" type="Document" />
					<param name="followImports" comment="Flag used to indicate whether to download/parse XSD
  files referenced by the schema/import nodes." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addSchema" fulltype="void" type="void">
				<comment>
					<description>Used to add multiple external XSDs.</description>
					<attribute name="@param">
						<description>followImports Flag used to indicate whether to download/parse XSD
  files referenced by the schema/import nodes.</description>
					</attribute>
				</comment>
				<params>
					<param name="xsd" fulltype="org.w3c.dom.Document[]" type="Document" />
					<param name="followImports" comment="Flag used to indicate whether to download/parse XSD
  files referenced by the schema/import nodes." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getServices" fulltype="javaxt.webservices.Service[]" type="Service">
				<comment>
					<description>Returns a list of web services found in this WSDL.</description>
				</comment>
			</method>
			<method visibility="public" name="getListOfServices" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns a list of service names found in this WSDL.</description>
				</comment>
			</method>
			<method visibility="public" name="getService" fulltype="javaxt.webservices.Service" type="Service">
				<params>
					<param name="ServiceName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getService" fulltype="javaxt.webservices.Service" type="Service">
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getMethod" fulltype="javaxt.webservices.Method" type="Method">
				<params>
					<param name="ServiceName" fulltype="java.lang.String" type="String" />
					<param name="MethodName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getMethod" fulltype="javaxt.webservices.Method" type="Method">
				<params>
					<param name="MethodName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getListOfMethods" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="ServiceName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.SoapResponse" type="SoapResponse">
		<comment>
			<description>Used to encapsulate an XML/SOAP message returned from a WebService.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="SoapResponse">
				<comment>
					<description>Instantiates this class using an HTTP Response object. Note that the
  entire response is parsed and stored as a class variable. This can be
  problematic when dealing with very large SOAP messages.</description>
				</comment>
				<params>
					<param name="response" fulltype="javaxt.http.Response" type="Response" />
					<param name="resultsNode" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="javaxt.webservices.SoapException" type="SoapException" />
				</exceptions>
			</constructor>
			<method visibility="public" name="getHeaders" fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns key/value map representing all the HTTP headers returned from
  the server.</description>
				</comment>
			</method>
			<method visibility="public" name="getURL" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Returns the url used to connect to the server. Note that this URL may
  differ from the one used to instantiate the Request object.</description>
				</comment>
			</method>
			<method visibility="public" name="getBody" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the body of the HTTP response returned from the server. The body
  contains the raw XML/SOAP document.</description>
				</comment>
			</method>
			<method visibility="public" name="toXML" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Converts the raw response found in the body of the SOAP message into an
  xml document.</description>
				</comment>
			</method>
			<method visibility="public" name="toByteArray" fulltype="byte[]" type="byte">
				<comment>
					<description>Converts the raw response found in the body of the SOAP message into a
  byte array. Assumes that the response is Base64 encoded.</description>
				</comment>
			</method>
			<method visibility="public" name="toImage" fulltype="javaxt.io.Image" type="Image">
				<comment>
					<description>Converts the raw response found in the body of the SOAP message into an
  image. Typically images are encoded in Base64.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the raw response found in the body of the SOAP message.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.SoapRequest" type="SoapRequest">
		<comment>
			<description>Used to execute a web service request using XML/SOAP over HTTP.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="SoapRequest">
				<comment>
					<description>Creates a new instance of SoapRequest.</description>
				</comment>
				<params>
					<param name="service" fulltype="javaxt.webservices.Service" type="Service" />
					<param name="method" fulltype="javaxt.webservices.Method" type="Method" />
					<param name="parameters" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="setUseCache" fulltype="void" type="void">
				<comment>
					<description>Sets the header associated with cache-control. If true, the protocol is
   allowed to use caching whenever it can. If false, the protocol must
   always try to get a fresh copy of the object. By default, the useCache
   variable is set to false.</description>
				</comment>
				<params>
					<param name="useCache" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="validateSSLCertificates" fulltype="void" type="void">
				<comment>
					<description>Used to enable/disable certificate validation for HTTPS Connections.
  Note that this is set to false by default.</description>
				</comment>
				<params>
					<param name="validateCertificates" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setNumRedirects" fulltype="void" type="void">
				<comment>
					<description>Sets the maximum number of redirects to follow. By default, this number
  is set to 5.</description>
				</comment>
				<params>
					<param name="maxRedirects" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setCredentials" fulltype="void" type="void">
				<params>
					<param name="username" fulltype="java.lang.String" type="String" />
					<param name="password" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setUserName" fulltype="void" type="void">
				<params>
					<param name="username" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setPassword" fulltype="void" type="void">
				<params>
					<param name="password" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProxy" fulltype="java.net.Proxy" type="Proxy">
				<comment>
					<description>Used to set the http proxy.</description>
				</comment>
				<params>
					<param name="proxyHost" fulltype="java.lang.String" type="String" />
					<param name="proxyPort" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setProxy" fulltype="java.net.Proxy" type="Proxy">
				<comment>
					<description>Used to set the http proxy.</description>
				</comment>
				<params>
					<param name="httpProxy" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setProxy" fulltype="void" type="void">
				<comment>
					<description>Used to set the http proxy as needed.</description>
				</comment>
				<params>
					<param name="httpProxy" fulltype="java.net.Proxy" type="Proxy" />
				</params>
			</method>
			<method visibility="public" name="setHeader" fulltype="void" type="void">
				<comment>
					<description>Used to set a Request Property in the HTTP header (e.g. &quot;User-Agent&quot;).</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="addHeader" fulltype="void" type="void">
				<comment>
					<description>Used to add a Request Property to the HTTP header (e.g. &quot;User-Agent&quot;).</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResponse" fulltype="javaxt.webservices.SoapResponse" type="SoapResponse">
				<comment>
					<description>Used to execute the web service method specified in the constructor and
  returns a response from the server.</description>
				</comment>
				<exceptions>
					<exception fulltype="javaxt.webservices.SoapException" type="SoapException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="javaxt.webservices" serializable="true" superclassfulltype="java.lang.Exception" fulltype="javaxt.webservices.SoapException" type="SoapException">
		<comment>
			<description>Custom error thrown when parsing a SOAP response.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="SoapException">
				<comment>
					<description>Creates a new instance of SoapException.</description>
				</comment>
				<params>
					<param name="message" fulltype="java.lang.String" type="String" />
					<param name="serverResponse" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getServerResponse" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.Service" type="Service">
		<comment>
			<description>Used to represent a web service.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="Service">
				<comment>
					<description>Instantiates this class using a &quot;Service&quot; node from an SSD.</description>
				</comment>
				<params>
					<param name="ServiceNode" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getURL" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getNameSpace" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getMethods" fulltype="javaxt.webservices.Method[]" type="Method" />
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="ServiceName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getMethod" fulltype="javaxt.webservices.Method" type="Method">
				<params>
					<param name="MethodName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getMethod" fulltype="javaxt.webservices.Method" type="Method">
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setURL" fulltype="void" type="void">
				<params>
					<param name="URL" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.Parameters" type="Parameters">
		<comment>
			<description>A convienance class used to represent multiple parameters.</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Parameters">
				<params>
					<param name="Parameters" fulltype="javaxt.webservices.Parameter[]" type="Parameter" />
				</params>
			</constructor>
			<method visibility="public" name="getArray" fulltype="javaxt.webservices.Parameter[]" type="Parameter" />
			<method visibility="public" name="getLength" fulltype="int" type="int" />
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="p" fulltype="javaxt.webservices.Parameter" type="Parameter" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Used to set a parameter value. Use &quot;/&quot; character to separate nodes</description>
				</comment>
				<params>
					<param name="parameterName" fulltype="java.lang.String" type="String" />
					<param name="parameterValue" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="parameterName" fulltype="java.lang.String" type="String" />
					<param name="bytes" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="ParameterName" fulltype="java.lang.String" type="String" />
					<param name="ParameterValue" fulltype="java.util.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="getValue" fulltype="java.lang.String" type="String">
				<params>
					<param name="ParameterName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getParameter" fulltype="javaxt.webservices.Parameter" type="Parameter">
				<params>
					<param name="ParameterName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getParameter" fulltype="javaxt.webservices.Parameter" type="Parameter">
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="toHTML" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to generate html form inputs</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.Parameter" type="Parameter">
		<comment>
			<description>Used to represent a parameter associated with a web method.</description>
		</comment>
		<fields>
			<field visibility="protected" name="IsNillable" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="IsAttribute" fulltype="boolean" type="boolean" />
			<field visibility="protected" name="ParentNode" fulltype="org.w3c.dom.Node" type="Node" />
			<field visibility="protected" name="Children" fulltype="javaxt.webservices.Parameter[]" type="Parameter" />
		</fields>
		<methods>
			<constructor visibility="protected" name="Parameter">
				<comment>
					<description>Instantiates this class using a &quot;Parameter&quot; node from an SSD.</description>
				</comment>
				<params>
					<param name="ParameterNode" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getType" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getValue" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="Value" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="bytes" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="setValue" fulltype="void" type="void">
				<params>
					<param name="date" fulltype="java.util.Date" type="Date" />
				</params>
			</method>
			<method visibility="public" name="getMaxOccurs" fulltype="int" type="int" />
			<method visibility="public" name="getMinOccurs" fulltype="int" type="int" />
			<method visibility="public" name="isRequired" fulltype="boolean" type="boolean" />
			<method visibility="public" name="isComplex" fulltype="boolean" type="boolean" />
			<method visibility="public" name="getChildren" fulltype="javaxt.webservices.Parameter[]" type="Parameter" />
			<method visibility="protected" name="getChildNodes" fulltype="org.w3c.dom.NodeList" type="NodeList" />
			<method visibility="public" name="getOptions" fulltype="javaxt.webservices.Option[]" type="Option" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.Option" type="Option">
		<comment>
			<description>Enter class description here</description>
		</comment>
		<methods>
			<constructor visibility="public" name="Option">
				<comment>
					<description>Creates a new instance of Option.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="value" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getValue" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.webservices" superclassfulltype="java.lang.Object" fulltype="javaxt.webservices.Method" type="Method">
		<comment>
			<description>Used to represent a web method.</description>
		</comment>
		<methods>
			<constructor visibility="protected" name="Method">
				<comment>
					<description>Used to retrieve a method from an SSD Method Node</description>
				</comment>
				<params>
					<param name="MethodNode" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</constructor>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getDescription" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getSoapAction" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getResultsNodeName" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getParameters" fulltype="javaxt.webservices.Parameters" type="Parameters">
				<comment>
					<description>Returns a list of parameters associated with this method.</description>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<params>
					<param name="MethodName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="javaxt.xml" superclassfulltype="java.lang.Object" fulltype="javaxt.xml.DOM" type="DOM">
		<comment>
			<description>Provides basic utilities to simplify loading and parsing xml</description>
		</comment>
		<methods>
			<method static="true" visibility="public" name="createDocument" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Used to create a DOM document from a URL.</description>
				</comment>
				<params>
					<param name="url" fulltype="java.net.URL" type="URL" />
				</params>
			</method>
			<method static="true" visibility="public" name="createDocument" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Used to create a DOM document from a java.io.File.</description>
				</comment>
				<params>
					<param name="file" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="public" name="createDocument" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Used to create a DOM document from a String.</description>
				</comment>
				<params>
					<param name="xml" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="createDocument" fulltype="org.w3c.dom.Document" type="Document">
				<params>
					<param name="xml" fulltype="java.lang.String" type="String" />
					<param name="charsetName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="createDocument" fulltype="org.w3c.dom.Document" type="Document">
				<comment>
					<description>Used to create a DOM document from an InputStream.</description>
				</comment>
				<params>
					<param name="is" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="getOuterNode" fulltype="org.w3c.dom.Node" type="Node">
				<comment>
					<description>Returns the outer node for a given xml document.</description>
					<attribute name="@param">
						<description>xml A org.w3c.dom.Document</description>
					</attribute>
				</comment>
				<params>
					<param name="xml" comment="A org.w3c.dom.Document" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to compare two XML documents by performing a raw string comparison.</description>
				</comment>
				<params>
					<param name="xml" fulltype="org.w3c.dom.Document" type="Document" />
					<param name="xml2" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a DOM Document to a String</description>
					<attribute name="@param">
						<description>xml A org.w3c.dom.Document</description>
					</attribute>
				</comment>
				<params>
					<param name="xml" comment="A org.w3c.dom.Document" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a NodeList to a String</description>
				</comment>
				<params>
					<param name="nodeList" fulltype="org.w3c.dom.NodeList" type="NodeList" />
				</params>
			</method>
			<method static="true" visibility="public" name="getText" fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts a Node to a String</description>
				</comment>
				<params>
					<param name="node" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="hasChildren" fulltype="boolean" type="boolean">
				<comment>
					<description>Used to determine whether a given node has any children. Differs from the 
  native DOM implementation in that this function only considers child
  nodes that have a node type value equal to 1.</description>
				</comment>
				<params>
					<param name="node" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAttributeValue" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to return the value of a given node attribute. The search is case
   insensitive. If no match is found, returns an empty string.</description>
				</comment>
				<params>
					<param name="attrCollection" fulltype="org.w3c.dom.NamedNodeMap" type="NamedNodeMap" />
					<param name="attrName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getAttributeValue" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to return the value of a given node attribute. The search is case
   insensitive. If no match is found, returns an empty string.</description>
				</comment>
				<params>
					<param name="Node" fulltype="org.w3c.dom.Node" type="Node" />
					<param name="AttributeName" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getNodeValue" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the value of a given node as text. If the node has children, the
  method will return an xml fragment which will include the input node as
  the outer node. This is a legacy feature which should be deprecated over
  time.</description>
				</comment>
				<params>
					<param name="node" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDocumentAttributes" fulltype="org.w3c.dom.NamedNodeMap" type="NamedNodeMap">
				<comment>
					<attribute name="@param">
						<description>xml A org.w3c.dom.Document</description>
					</attribute>
				</comment>
				<params>
					<param name="xml" comment="A org.w3c.dom.Document" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="getTargetNameSpace" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the &quot;targetNamespace&quot; for a given xml document.</description>
					<attribute name="@param">
						<description>xml A org.w3c.dom.Document</description>
					</attribute>
				</comment>
				<params>
					<param name="xml" comment="A org.w3c.dom.Document" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="getNameSpaces" fulltype="java.util.HashMap" type="HashMap">
				<comment>
					<description>Returns a hashmap with all the namespaces found in a given xml document.
  The hashmap key is the namespace prefix and the corresponding value is
  the namespace url.</description>
					<attribute name="@param">
						<description>xml A org.w3c.dom.Document</description>
					</attribute>
				</comment>
				<params>
					<param name="xml" comment="A org.w3c.dom.Document" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="getElementsByTagName" fulltype="org.w3c.dom.Node[]" type="Node">
				<comment>
					<description>Returns an array of nodes that match a given tagName (node name). The
  results will include all nodes that match, regardless of namespace. To
  narrow the results to a specific namespace, simply include the namespace
  prefix in the tag name (e.g. &quot;t:Contact&quot;).</description>
				</comment>
				<params>
					<param name="tagName" fulltype="java.lang.String" type="String" />
					<param name="xml" fulltype="org.w3c.dom.Document" type="Document" />
				</params>
			</method>
			<method static="true" visibility="public" name="getElementsByTagName" fulltype="org.w3c.dom.Node[]" type="Node">
				<comment>
					<description>Returns an array of nodes that match a given tagName (node name). The
  results will include all nodes that match, regardless of namespace. To
  narrow the results to a specific namespace, simply include the namespace
  prefix in the tag name (e.g. &quot;t:Contact&quot;). Returns an empty array if
  no nodes are found.</description>
				</comment>
				<params>
					<param name="tagName" fulltype="java.lang.String" type="String" />
					<param name="node" fulltype="org.w3c.dom.Node" type="Node" />
				</params>
			</method>
			<method static="true" visibility="public" name="getNodes" fulltype="org.w3c.dom.Node[]" type="Node">
				<comment>
					<description>Converts a NodeList into an array to simplify nested loops.</description>
				</comment>
				<params>
					<param name="nodeList" fulltype="org.w3c.dom.NodeList" type="NodeList" />
				</params>
			</method>
		</methods>
	</jelclass>
</jel>
